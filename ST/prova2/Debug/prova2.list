
prova2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007690  08007690  00008690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e0  080076e0  00009018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080076e0  080076e0  00009018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080076e0  080076e0  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e0  080076e0  000086e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076e4  080076e4  000086e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080076e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009018  2**0
                  CONTENTS
 10 .bss          000005b0  20000018  20000018  00009018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005c8  200005c8  00009018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8ca  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d8  00000000  00000000  00023912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  000269f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ce  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002043e  00000000  00000000  00029256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce1a  00000000  00000000  00049694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6826  00000000  00000000  000664ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ccd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061a8  00000000  00000000  0012cd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00132ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007678 	.word	0x08007678

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08007678 	.word	0x08007678

080001c8 <servo_set_angle>:
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void servo_set_angle(uint8_t angle)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint16_t pulse = 500 + (angle * 2000) / 180;  // 500â€“2500
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80001d8:	fb02 f303 	mul.w	r3, r2, r3
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <servo_set_angle+0x40>)
 80001de:	fb82 1203 	smull	r1, r2, r2, r3
 80001e2:	441a      	add	r2, r3
 80001e4:	11d2      	asrs	r2, r2, #7
 80001e6:	17db      	asrs	r3, r3, #31
 80001e8:	1ad3      	subs	r3, r2, r3
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80001f0:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80001f2:	4b06      	ldr	r3, [pc, #24]	@ (800020c <servo_set_angle+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	89fa      	ldrh	r2, [r7, #14]
 80001f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	b60b60b7 	.word	0xb60b60b7
 800020c:	2000013c 	.word	0x2000013c

08000210 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
		 * PREMENDO L'USER BOTTON RIPORTIAMO IL SISTEMA ALLO STATO RESET E ATTIVIAMO IL LED 3
		 * E RESETTIAMO IL VALORE DELL'ANGOLO DEL SERVO MOTORE
		 *
		 */

		strcpy(stato,"reset");
 800021a:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <HAL_GPIO_EXTI_Callback+0x28>)
 800021c:	4a07      	ldr	r2, [pc, #28]	@ (800023c <HAL_GPIO_EXTI_Callback+0x2c>)
 800021e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000222:	6018      	str	r0, [r3, #0]
 8000224:	3304      	adds	r3, #4
 8000226:	8019      	strh	r1, [r3, #0]
		servo_set_angle(0);
 8000228:	2000      	movs	r0, #0
 800022a:	f7ff ffcd 	bl	80001c8 <servo_set_angle>

		//HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_RESET);

}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000004 	.word	0x20000004
 800023c:	08007690 	.word	0x08007690

08000240 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	//CAMBIO MODE, QUESTO FA LAMPEGGIARE IL LED PER 2 SECONDI GRAZIE AL CODICE INSERITO NEL MAIN

	//HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET);
	//spegni = 1;

	if (huart == &huart4){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a15      	ldr	r2, [pc, #84]	@ (80002a0 <HAL_UART_RxCpltCallback+0x60>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d123      	bne.n	8000298 <HAL_UART_RxCpltCallback+0x58>


		if(pbuf=='Y'){
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <HAL_UART_RxCpltCallback+0x64>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b59      	cmp	r3, #89	@ 0x59
 8000256:	d110      	bne.n	800027a <HAL_UART_RxCpltCallback+0x3a>
			MODE = 1;
 8000258:	4b13      	ldr	r3, [pc, #76]	@ (80002a8 <HAL_UART_RxCpltCallback+0x68>)
 800025a:	2201      	movs	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]
			strcpy(stato, "aperto"); //ho aperto, aspetto che l'utente si riavvicini per chiudere
 800025e:	4b13      	ldr	r3, [pc, #76]	@ (80002ac <HAL_UART_RxCpltCallback+0x6c>)
 8000260:	4a13      	ldr	r2, [pc, #76]	@ (80002b0 <HAL_UART_RxCpltCallback+0x70>)
 8000262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000266:	6018      	str	r0, [r3, #0]
 8000268:	3304      	adds	r3, #4
 800026a:	8019      	strh	r1, [r3, #0]
 800026c:	3302      	adds	r3, #2
 800026e:	0c0a      	lsrs	r2, r1, #16
 8000270:	701a      	strb	r2, [r3, #0]
			//facciamo girare il motore
			servo_set_angle(120);
 8000272:	2078      	movs	r0, #120	@ 0x78
 8000274:	f7ff ffa8 	bl	80001c8 <servo_set_angle>
 8000278:	e009      	b.n	800028e <HAL_UART_RxCpltCallback+0x4e>
		}
		else{
			MODE = 2;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <HAL_UART_RxCpltCallback+0x68>)
 800027c:	2202      	movs	r2, #2
 800027e:	701a      	strb	r2, [r3, #0]
			strcpy(stato, "reset"); //non apro e ritorno allo stato iniziale.
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <HAL_UART_RxCpltCallback+0x6c>)
 8000282:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <HAL_UART_RxCpltCallback+0x74>)
 8000284:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000288:	6018      	str	r0, [r3, #0]
 800028a:	3304      	adds	r3, #4
 800028c:	8019      	strh	r1, [r3, #0]

		}

		HAL_UART_Receive_IT(&huart4,&pbuf, 1); //RIATTIVO INTERRUZIONI IN RICEZIONE
 800028e:	2201      	movs	r2, #1
 8000290:	4904      	ldr	r1, [pc, #16]	@ (80002a4 <HAL_UART_RxCpltCallback+0x64>)
 8000292:	4803      	ldr	r0, [pc, #12]	@ (80002a0 <HAL_UART_RxCpltCallback+0x60>)
 8000294:	f005 ffa9 	bl	80061ea <HAL_UART_Receive_IT>

	}

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	200001d4 	.word	0x200001d4
 80002a4:	200005b9 	.word	0x200005b9
 80002a8:	200005b8 	.word	0x200005b8
 80002ac:	20000004 	.word	0x20000004
 80002b0:	08007698 	.word	0x08007698
 80002b4:	08007690 	.word	0x08007690

080002b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d102      	bne.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0x18>
        HAL_ADC_Start_IT(&hadc1);  // Avvio conversione non bloccante
 80002ca:	4804      	ldr	r0, [pc, #16]	@ (80002dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002cc:	f001 f99a 	bl	8001604 <HAL_ADC_Start_IT>
    }
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40000800 	.word	0x40000800
 80002dc:	20000034 	.word	0x20000034

080002e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80002f0:	d17b      	bne.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
        uint32_t adc_val = HAL_ADC_GetValue(hadc);
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f001 fac6 	bl	8001884 <HAL_ADC_GetValue>
 80002f8:	60f8      	str	r0, [r7, #12]
        float voltage = (adc_val / 4095.0f) * 3.3f;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	ee07 3a90 	vmov	s15, r3
 8000300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000304:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80003f4 <HAL_ADC_ConvCpltCallback+0x114>
 8000308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800030c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80003f8 <HAL_ADC_ConvCpltCallback+0x118>
 8000310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000314:	edc7 7a02 	vstr	s15, [r7, #8]

        // Esegui la logica di stato qui (eviti blocchi nell'ISR timer)
        switch (stato[0]) {
 8000318:	4b38      	ldr	r3, [pc, #224]	@ (80003fc <HAL_ADC_ConvCpltCallback+0x11c>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b72      	cmp	r3, #114	@ 0x72
 800031e:	d006      	beq.n	800032e <HAL_ADC_ConvCpltCallback+0x4e>
 8000320:	2b72      	cmp	r3, #114	@ 0x72
 8000322:	dc54      	bgt.n	80003ce <HAL_ADC_ConvCpltCallback+0xee>
 8000324:	2b61      	cmp	r3, #97	@ 0x61
 8000326:	d028      	beq.n	800037a <HAL_ADC_ConvCpltCallback+0x9a>
 8000328:	2b63      	cmp	r3, #99	@ 0x63
 800032a:	d01f      	beq.n	800036c <HAL_ADC_ConvCpltCallback+0x8c>
 800032c:	e04f      	b.n	80003ce <HAL_ADC_ConvCpltCallback+0xee>
            case 'r':
                if (voltage > 1.0f) {
 800032e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800033a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800033e:	dc00      	bgt.n	8000342 <HAL_ADC_ConvCpltCallback+0x62>
                    strcpy(stato, "check");
                    HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET);
                    HAL_UART_Transmit(&huart4, &psbuf, 1, HAL_MAX_DELAY);
                }
                break;
 8000340:	e053      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
                    strcpy(stato, "check");
 8000342:	4b2e      	ldr	r3, [pc, #184]	@ (80003fc <HAL_ADC_ConvCpltCallback+0x11c>)
 8000344:	4a2e      	ldr	r2, [pc, #184]	@ (8000400 <HAL_ADC_ConvCpltCallback+0x120>)
 8000346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800034a:	6018      	str	r0, [r3, #0]
 800034c:	3304      	adds	r3, #4
 800034e:	8019      	strh	r1, [r3, #0]
                    HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000356:	482b      	ldr	r0, [pc, #172]	@ (8000404 <HAL_ADC_ConvCpltCallback+0x124>)
 8000358:	f002 fd5e 	bl	8002e18 <HAL_GPIO_WritePin>
                    HAL_UART_Transmit(&huart4, &psbuf, 1, HAL_MAX_DELAY);
 800035c:	f04f 33ff 	mov.w	r3, #4294967295
 8000360:	2201      	movs	r2, #1
 8000362:	4929      	ldr	r1, [pc, #164]	@ (8000408 <HAL_ADC_ConvCpltCallback+0x128>)
 8000364:	4829      	ldr	r0, [pc, #164]	@ (800040c <HAL_ADC_ConvCpltCallback+0x12c>)
 8000366:	f005 feb7 	bl	80060d8 <HAL_UART_Transmit>
                break;
 800036a:	e03e      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
            case 'c':
                HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000372:	4824      	ldr	r0, [pc, #144]	@ (8000404 <HAL_ADC_ConvCpltCallback+0x124>)
 8000374:	f002 fd50 	bl	8002e18 <HAL_GPIO_WritePin>
                break;
 8000378:	e037      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
            case 'a':
                if (!attesa_reset) {
 800037a:	4b25      	ldr	r3, [pc, #148]	@ (8000410 <HAL_ADC_ConvCpltCallback+0x130>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d110      	bne.n	80003a4 <HAL_ADC_ConvCpltCallback+0xc4>
                    if (voltage > 1.0f) {
 8000382:	edd7 7a02 	vldr	s15, [r7, #8]
 8000386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800038a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800038e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000392:	dc00      	bgt.n	8000396 <HAL_ADC_ConvCpltCallback+0xb6>
                    if (voltage < 0.5f) {
                        attesa_reset = 0;
                        strcpy(stato, "reset");  // solo ora si può resettare
                    }
                }
                break;
 8000394:	e029      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
                        servo_set_angle(0);
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ff16 	bl	80001c8 <servo_set_angle>
                        attesa_reset = 1;  // ora aspettiamo che la tensione scenda
 800039c:	4b1c      	ldr	r3, [pc, #112]	@ (8000410 <HAL_ADC_ConvCpltCallback+0x130>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
                break;
 80003a2:	e022      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
                    if (voltage < 0.5f) {
 80003a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80003a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80003ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b4:	d400      	bmi.n	80003b8 <HAL_ADC_ConvCpltCallback+0xd8>
                break;
 80003b6:	e018      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
                        attesa_reset = 0;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <HAL_ADC_ConvCpltCallback+0x130>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
                        strcpy(stato, "reset");  // solo ora si può resettare
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <HAL_ADC_ConvCpltCallback+0x11c>)
 80003c0:	4a14      	ldr	r2, [pc, #80]	@ (8000414 <HAL_ADC_ConvCpltCallback+0x134>)
 80003c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c6:	6018      	str	r0, [r3, #0]
 80003c8:	3304      	adds	r3, #4
 80003ca:	8019      	strh	r1, [r3, #0]
                break;
 80003cc:	e00d      	b.n	80003ea <HAL_ADC_ConvCpltCallback+0x10a>
            default:
                strcpy(stato, "reset");
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <HAL_ADC_ConvCpltCallback+0x11c>)
 80003d0:	4a10      	ldr	r2, [pc, #64]	@ (8000414 <HAL_ADC_ConvCpltCallback+0x134>)
 80003d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003d6:	6018      	str	r0, [r3, #0]
 80003d8:	3304      	adds	r3, #4
 80003da:	8019      	strh	r1, [r3, #0]
                HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003e2:	4808      	ldr	r0, [pc, #32]	@ (8000404 <HAL_ADC_ConvCpltCallback+0x124>)
 80003e4:	f002 fd18 	bl	8002e18 <HAL_GPIO_WritePin>
                break;
 80003e8:	bf00      	nop
        }
    }
}
 80003ea:	bf00      	nop
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	457ff000 	.word	0x457ff000
 80003f8:	40533333 	.word	0x40533333
 80003fc:	20000004 	.word	0x20000004
 8000400:	080076a0 	.word	0x080076a0
 8000404:	48001000 	.word	0x48001000
 8000408:	20000000 	.word	0x20000000
 800040c:	200001d4 	.word	0x200001d4
 8000410:	200005c0 	.word	0x200005c0
 8000414:	08007690 	.word	0x08007690

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 fe74 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f86c 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 fb24 	bl	8000a70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000428:	f000 f942 	bl	80006b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800042c:	f000 f980 	bl	8000730 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000430:	f000 fafc 	bl	8000a2c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000434:	f000 f8cc 	bl	80005d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000438:	f000 fac8 	bl	80009cc <MX_USART2_UART_Init>
  MX_UART4_Init();
 800043c:	f000 fa96 	bl	800096c <MX_UART4_Init>
  MX_TIM4_Init();
 8000440:	f000 fa44 	bl	80008cc <MX_TIM4_Init>
  MX_TIM1_Init();
 8000444:	f000 f9b2 	bl	80007ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Avvia PWM
 8000448:	2100      	movs	r1, #0
 800044a:	4825      	ldr	r0, [pc, #148]	@ (80004e0 <main+0xc8>)
 800044c:	f004 fca0 	bl	8004d90 <HAL_TIM_PWM_Start>

HAL_TIM_Base_Start_IT(&htim4);
 8000450:	4824      	ldr	r0, [pc, #144]	@ (80004e4 <main+0xcc>)
 8000452:	f004 fbdb 	bl	8004c0c <HAL_TIM_Base_Start_IT>
HAL_UART_Receive_IT(&huart4, &pbuf, 1);
 8000456:	2201      	movs	r2, #1
 8000458:	4923      	ldr	r1, [pc, #140]	@ (80004e8 <main+0xd0>)
 800045a:	4824      	ldr	r0, [pc, #144]	@ (80004ec <main+0xd4>)
 800045c:	f005 fec5 	bl	80061ea <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //servo_set_angle(0);

	  if (MODE == 1) {
 8000460:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <main+0xd8>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d112      	bne.n	800048e <main+0x76>
	      MODE = 0;
 8000468:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <main+0xd8>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	      HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET);
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000474:	481f      	ldr	r0, [pc, #124]	@ (80004f4 <main+0xdc>)
 8000476:	f002 fccf 	bl	8002e18 <HAL_GPIO_WritePin>

	      HAL_Delay(2000);
 800047a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800047e:	f000 fea9 	bl	80011d4 <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000488:	481a      	ldr	r0, [pc, #104]	@ (80004f4 <main+0xdc>)
 800048a:	f002 fcc5 	bl	8002e18 <HAL_GPIO_WritePin>
	  }
	  if(MODE==2){
 800048e:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <main+0xd8>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d112      	bne.n	80004bc <main+0xa4>
		  MODE = 0;
 8000496:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <main+0xd8>)
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, LD3_Pin, ACCESO);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004a2:	4814      	ldr	r0, [pc, #80]	@ (80004f4 <main+0xdc>)
 80004a4:	f002 fcb8 	bl	8002e18 <HAL_GPIO_WritePin>

			      HAL_Delay(2000);
 80004a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004ac:	f000 fe92 	bl	80011d4 <HAL_Delay>
			     HAL_GPIO_WritePin(GPIOE, LD3_Pin, SPENTO);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b6:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <main+0xdc>)
 80004b8:	f002 fcae 	bl	8002e18 <HAL_GPIO_WritePin>
	  }


	  if (spegni == 1){
 80004bc:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <main+0xe0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d1cd      	bne.n	8000460 <main+0x48>
		  spegni = 0;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <main+0xe0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
		  HAL_Delay(500);
 80004ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004ce:	f000 fe81 	bl	80011d4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d8:	4806      	ldr	r0, [pc, #24]	@ (80004f4 <main+0xdc>)
 80004da:	f002 fc9d 	bl	8002e18 <HAL_GPIO_WritePin>
	  if (MODE == 1) {
 80004de:	e7bf      	b.n	8000460 <main+0x48>
 80004e0:	2000013c 	.word	0x2000013c
 80004e4:	20000188 	.word	0x20000188
 80004e8:	200005b9 	.word	0x200005b9
 80004ec:	200001d4 	.word	0x200001d4
 80004f0:	200005b8 	.word	0x200005b8
 80004f4:	48001000 	.word	0x48001000
 80004f8:	200005bc 	.word	0x200005bc

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b09e      	sub	sp, #120	@ 0x78
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000506:	2228      	movs	r2, #40	@ 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f007 f887 	bl	800761e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	223c      	movs	r2, #60	@ 0x3c
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 f879 	bl	800761e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800052c:	2303      	movs	r3, #3
 800052e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000530:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000534:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000550:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fe88 	bl	800326c <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000562:	f000 fb0d 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	230f      	movs	r3, #15
 8000568:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2302      	movs	r3, #2
 800056c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fe80 	bl	8004288 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800058e:	f000 faf7 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <SystemClock_Config+0xd0>)
 8000594:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800059e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f87a 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005be:	f000 fadf 	bl	8000b80 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3778      	adds	r7, #120	@ 0x78
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	000210aa 	.word	0x000210aa

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <MX_ADC1_Init+0xdc>)
 80005f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <MX_ADC1_Init+0xdc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <MX_ADC1_Init+0xdc>)
 800060e:	2200      	movs	r2, #0
 8000610:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <MX_ADC1_Init+0xdc>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000622:	2201      	movs	r2, #1
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_ADC1_Init+0xdc>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_ADC1_Init+0xdc>)
 800063c:	2204      	movs	r2, #4
 800063e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	4817      	ldr	r0, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xdc>)
 800064e:	f000 fdf9 	bl	8001244 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000658:	f000 fa92 	bl	8000b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4811      	ldr	r0, [pc, #68]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000668:	f001 ff12 	bl	8002490 <HAL_ADCEx_MultiModeConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000672:	f000 fa85 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000676:	2302      	movs	r3, #2
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067a:	2301      	movs	r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_ADC1_Init+0xdc>)
 8000694:	f001 fc12 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800069e:	f000 fa6f 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000034 	.word	0x20000034

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <MX_I2C1_Init+0x78>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <MX_I2C1_Init+0x7c>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006ec:	f002 fbc4 	bl	8002e78 <HAL_I2C_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f6:	f000 fa43 	bl	8000b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <MX_I2C1_Init+0x74>)
 80006fe:	f002 fc56 	bl	8002fae <HAL_I2CEx_ConfigAnalogFilter>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 fa3a 	bl	8000b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800070c:	2100      	movs	r1, #0
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_I2C1_Init+0x74>)
 8000710:	f002 fc98 	bl	8003044 <HAL_I2CEx_ConfigDigitalFilter>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800071a:	f000 fa31 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084
 8000728:	40005400 	.word	0x40005400
 800072c:	00201d2b 	.word	0x00201d2b

08000730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <MX_SPI1_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_SPI1_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_SPI1_Init+0x74>)
 800074a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800074e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_SPI1_Init+0x74>)
 800075e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000766:	2208      	movs	r2, #8
 8000768:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_SPI1_Init+0x74>)
 800077e:	2207      	movs	r2, #7
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_SPI1_Init+0x74>)
 800078a:	2208      	movs	r2, #8
 800078c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_SPI1_Init+0x74>)
 8000790:	f004 f93a 	bl	8004a08 <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 f9f1 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	@ 0x58
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	222c      	movs	r2, #44	@ 0x2c
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 ff20 	bl	800761e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007de:	4b39      	ldr	r3, [pc, #228]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007e0:	4a39      	ldr	r2, [pc, #228]	@ (80008c8 <MX_TIM1_Init+0x11c>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80007e4:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007e6:	2247      	movs	r2, #71	@ 0x47
 80007e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80007f0:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b32      	ldr	r3, [pc, #200]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fe:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <MX_TIM1_Init+0x118>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b2f      	ldr	r3, [pc, #188]	@ (80008c4 <MX_TIM1_Init+0x118>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800080a:	482e      	ldr	r0, [pc, #184]	@ (80008c4 <MX_TIM1_Init+0x118>)
 800080c:	f004 fa68 	bl	8004ce0 <HAL_TIM_PWM_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f9b3 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000826:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800082a:	4619      	mov	r1, r3
 800082c:	4825      	ldr	r0, [pc, #148]	@ (80008c4 <MX_TIM1_Init+0x118>)
 800082e:	f005 fae9 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 f9a2 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083c:	2360      	movs	r3, #96	@ 0x60
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000858:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4818      	ldr	r0, [pc, #96]	@ (80008c4 <MX_TIM1_Init+0x118>)
 8000862:	f004 fc97 	bl	8005194 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800086c:	f000 f988 	bl	8000b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80008a6:	f005 fb2d 	bl	8005f04 <HAL_TIMEx_ConfigBreakDeadTime>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80008b0:	f000 f966 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <MX_TIM1_Init+0x118>)
 80008b6:	f000 fa9d 	bl	8000df4 <HAL_TIM_MspPostInit>

}
 80008ba:	bf00      	nop
 80008bc:	3758      	adds	r7, #88	@ 0x58
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000013c 	.word	0x2000013c
 80008c8:	40012c00 	.word	0x40012c00

080008cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_TIM4_Init+0x98>)
 80008ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000968 <MX_TIM4_Init+0x9c>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_TIM4_Init+0x98>)
 80008f2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80008f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM4_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_TIM4_Init+0x98>)
 8000900:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_TIM4_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_TIM4_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <MX_TIM4_Init+0x98>)
 8000914:	f004 f923 	bl	8004b5e <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800091e:	f000 f92f 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_TIM4_Init+0x98>)
 8000930:	f004 fd44 	bl	80053bc <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800093a:	f000 f921 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <MX_TIM4_Init+0x98>)
 800094c:	f005 fa5a 	bl	8005e04 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000956:	f000 f913 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000188 	.word	0x20000188
 8000968:	40000800 	.word	0x40000800

0800096c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_UART4_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	@ (80009c8 <MX_UART4_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <MX_UART4_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_UART4_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_UART4_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_UART4_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_UART4_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_UART4_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_UART4_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_UART4_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_UART4_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_UART4_Init+0x58>)
 80009b0:	f005 fb44 	bl	800603c <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f8e1 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001d4 	.word	0x200001d4
 80009c8:	40004c00 	.word	0x40004c00

080009cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	@ (8000a28 <MX_USART2_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009d8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_USART2_UART_Init+0x58>)
 8000a10:	f005 fb14 	bl	800603c <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f8b1 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000025c 	.word	0x2000025c
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <MX_USB_PCD_Init+0x40>)
 8000a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a38:	2208      	movs	r2, #8
 8000a3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a3e:	2202      	movs	r2, #2
 8000a40:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_USB_PCD_Init+0x3c>)
 8000a56:	f002 fb41 	bl	80030dc <HAL_PCD_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000a60:	f000 f88e 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200002e4 	.word	0x200002e4
 8000a6c:	40005c00 	.word	0x40005c00

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b39      	ldr	r3, [pc, #228]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a35      	ldr	r2, [pc, #212]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000aa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a2f      	ldr	r2, [pc, #188]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000abc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a29      	ldr	r2, [pc, #164]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <MX_GPIO_Init+0x108>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000afe:	2200      	movs	r2, #0
 8000b00:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000b04:	481d      	ldr	r0, [pc, #116]	@ (8000b7c <MX_GPIO_Init+0x10c>)
 8000b06:	f002 f987 	bl	8002e18 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000b0a:	2336      	movs	r3, #54	@ 0x36
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <MX_GPIO_Init+0x10c>)
 8000b20:	f002 f800 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000b24:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000b28:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <MX_GPIO_Init+0x10c>)
 8000b3e:	f001 fff1 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b42:	2301      	movs	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5a:	f001 ffe3 	bl	8002b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2006      	movs	r0, #6
 8000b64:	f001 ff2b 	bl	80029be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b68:	2006      	movs	r0, #6
 8000b6a:	f001 ff44 	bl	80029f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48001000 	.word	0x48001000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f001 fef0 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bf4:	d12c      	bne.n	8000c50 <HAL_ADC_MspInit+0x7c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_ADC_MspInit+0x84>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_ADC_MspInit+0x84>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6153      	str	r3, [r2, #20]
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_ADC_MspInit+0x84>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_ADC_MspInit+0x84>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <HAL_ADC_MspInit+0x84>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_ADC_MspInit+0x84>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 ff72 	bl	8002b24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2012      	movs	r0, #18
 8000c46:	f001 feba 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c4a:	2012      	movs	r0, #18
 8000c4c:	f001 fed3 	bl	80029f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	@ 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <HAL_I2C_MspInit+0x7c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d127      	bne.n	8000cce <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_I2C_MspInit+0x80>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a16      	ldr	r2, [pc, #88]	@ (8000cdc <HAL_I2C_MspInit+0x80>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_I2C_MspInit+0x80>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c96:	23c0      	movs	r3, #192	@ 0xc0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <HAL_I2C_MspInit+0x84>)
 8000cb2:	f001 ff37 	bl	8002b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_I2C_MspInit+0x80>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_I2C_MspInit+0x80>)
 8000cbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_I2C_MspInit+0x80>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	@ 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <HAL_SPI_MspInit+0x7c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d128      	bne.n	8000d58 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <HAL_SPI_MspInit+0x80>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <HAL_SPI_MspInit+0x80>)
 8000d0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <HAL_SPI_MspInit+0x80>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_SPI_MspInit+0x80>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <HAL_SPI_MspInit+0x80>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	6153      	str	r3, [r2, #20]
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_SPI_MspInit+0x80>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d36:	23e0      	movs	r3, #224	@ 0xe0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d54:	f001 fee6 	bl	8002b24 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	@ 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_TIM_PWM_MspInit+0x38>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10b      	bne.n	8000d92 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_TIM_Base_MspInit+0x44>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d113      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_TIM_Base_MspInit+0x48>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000df0 <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_TIM_Base_MspInit+0x48>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201e      	movs	r0, #30
 8000dd8:	f001 fdf1 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ddc:	201e      	movs	r0, #30
 8000dde:	f001 fe0a 	bl	80029f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40000800 	.word	0x40000800
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <HAL_TIM_MspPostInit+0x68>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d11d      	bne.n	8000e52 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_TIM_MspPostInit+0x6c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <HAL_TIM_MspPostInit+0x6c>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_TIM_MspPostInit+0x6c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e40:	2306      	movs	r3, #6
 8000e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4e:	f001 fe69 	bl	8002b24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a33      	ldr	r2, [pc, #204]	@ (8000f50 <HAL_UART_MspInit+0xec>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d131      	bne.n	8000eea <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a32      	ldr	r2, [pc, #200]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000ea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4821      	ldr	r0, [pc, #132]	@ (8000f58 <HAL_UART_MspInit+0xf4>)
 8000ed4:	f001 fe26 	bl	8002b24 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2034      	movs	r0, #52	@ 0x34
 8000ede:	f001 fd6e 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ee2:	2034      	movs	r0, #52	@ 0x34
 8000ee4:	f001 fd87 	bl	80029f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee8:	e02d      	b.n	8000f46 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1b      	ldr	r2, [pc, #108]	@ (8000f5c <HAL_UART_MspInit+0xf8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d128      	bne.n	8000f46 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f16:	6153      	str	r3, [r2, #20]
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_UART_MspInit+0xf0>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f24:	230c      	movs	r3, #12
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f34:	2307      	movs	r3, #7
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f001 fdef 	bl	8002b24 <HAL_GPIO_Init>
}
 8000f46:	bf00      	nop
 8000f48:	3730      	adds	r7, #48	@ 0x30
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004c00 	.word	0x40004c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	40004400 	.word	0x40004400

08000f60 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_PCD_MspInit+0x80>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d129      	bne.n	8000fd6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <HAL_PCD_MspInit+0x84>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <HAL_PCD_MspInit+0x84>)
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8c:	6153      	str	r3, [r2, #20]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_PCD_MspInit+0x84>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000f9a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000fac:	230e      	movs	r3, #14
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f001 fdb3 	bl	8002b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <HAL_PCD_MspInit+0x84>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_PCD_MspInit+0x84>)
 8000fc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_PCD_MspInit+0x84>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40005c00 	.word	0x40005c00
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f8a9 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800104a:	2001      	movs	r0, #1
 800104c:	f001 fefc 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <ADC1_2_IRQHandler+0x10>)
 800105a:	f000 fc21 	bl	80018a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000034 	.word	0x20000034

08001068 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM4_IRQHandler+0x10>)
 800106e:	f003 ff8f 	bl	8004f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000188 	.word	0x20000188

0800107c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <UART4_IRQHandler+0x10>)
 8001082:	f005 f8f7 	bl	8006274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001d4 	.word	0x200001d4

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopForever+0x2>
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopForever+0x6>)
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopForever+0xa>)
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopForever+0xe>)
 80010c2:	2300      	movs	r3, #0
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:
 80010c6:	58d4      	ldr	r4, [r2, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:
 80010cc:	18c4      	adds	r4, r0, r3
 80010ce:	428c      	cmp	r4, r1
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopForever+0x12>)
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopForever+0x16>)
 80010d6:	2300      	movs	r3, #0
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:
 80010de:	42a2      	cmp	r2, r4
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>
 80010e2:	f006 faa5 	bl	8007630 <__libc_init_array>
 80010e6:	f7ff f997 	bl	8000418 <main>

080010ea <LoopForever>:
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
 80010ec:	2000a000 	.word	0x2000a000
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000018 	.word	0x20000018
 80010f8:	080076e8 	.word	0x080076e8
 80010fc:	20000018 	.word	0x20000018
 8001100:	200005c8 	.word	0x200005c8

08001104 <ADC3_IRQHandler>:
 8001104:	e7fe      	b.n	8001104 <ADC3_IRQHandler>
	...

08001108 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_Init+0x28>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_Init+0x28>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f001 fc45 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fd32 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40022000 	.word	0x40022000

08001134 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fc5d 	bl	8002a12 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f001 fc25 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000014 	.word	0x20000014
 8001190:	20000010 	.word	0x20000010

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000014 	.word	0x20000014
 80011b8:	200005c4 	.word	0x200005c4

080011bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;  
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200005c4 	.word	0x200005c4

080011d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000014 	.word	0x20000014

0800121c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09a      	sub	sp, #104	@ 0x68
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e1c9      	b.n	80015f8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	d176      	bne.n	8001364 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d152      	bne.n	8001324 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fc9b 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d13b      	bne.n	8001324 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 fa45 	bl	800273c <ADC_Disable>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12f      	bne.n	8001324 <HAL_ADC_Init+0xe0>
 80012c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d12b      	bne.n	8001324 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012d4:	f023 0302 	bic.w	r3, r3, #2
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001300:	4b86      	ldr	r3, [pc, #536]	@ (800151c <HAL_ADC_Init+0x2d8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a86      	ldr	r2, [pc, #536]	@ (8001520 <HAL_ADC_Init+0x2dc>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9a      	lsrs	r2, r3, #18
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	e002      	b.n	800131e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3b01      	subs	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f9      	bne.n	8001318 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800133c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001340:	d110      	bne.n	8001364 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f023 0312 	bic.w	r3, r3, #18
 800134a:	f043 0210 	orr.w	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 8136 	bne.w	80015de <HAL_ADC_Init+0x39a>
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 8131 	bne.w	80015de <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8129 	bne.w	80015de <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001394:	f043 0202 	orr.w	r2, r3, #2
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a4:	d004      	beq.n	80013b0 <HAL_ADC_Init+0x16c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001524 <HAL_ADC_Init+0x2e0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_Init+0x170>
 80013b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001528 <HAL_ADC_Init+0x2e4>)
 80013b2:	e000      	b.n	80013b6 <HAL_ADC_Init+0x172>
 80013b4:	4b5d      	ldr	r3, [pc, #372]	@ (800152c <HAL_ADC_Init+0x2e8>)
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013c0:	d102      	bne.n	80013c8 <HAL_ADC_Init+0x184>
 80013c2:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <HAL_ADC_Init+0x2e0>)
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e01a      	b.n	80013fe <HAL_ADC_Init+0x1ba>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a55      	ldr	r2, [pc, #340]	@ (8001524 <HAL_ADC_Init+0x2e0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d103      	bne.n	80013da <HAL_ADC_Init+0x196>
 80013d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e011      	b.n	80013fe <HAL_ADC_Init+0x1ba>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a54      	ldr	r2, [pc, #336]	@ (8001530 <HAL_ADC_Init+0x2ec>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d102      	bne.n	80013ea <HAL_ADC_Init+0x1a6>
 80013e4:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <HAL_ADC_Init+0x2f0>)
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	e009      	b.n	80013fe <HAL_ADC_Init+0x1ba>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a51      	ldr	r2, [pc, #324]	@ (8001534 <HAL_ADC_Init+0x2f0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d102      	bne.n	80013fa <HAL_ADC_Init+0x1b6>
 80013f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001530 <HAL_ADC_Init+0x2ec>)
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e001      	b.n	80013fe <HAL_ADC_Init+0x1ba>
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_ADC_Init+0x1da>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_Init+0x1da>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_ADC_Init+0x1dc>
 800141e:	2300      	movs	r3, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d11c      	bne.n	800145e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001424:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_ADC_Init+0x202>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0x202>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_ADC_Init+0x204>
 8001446:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001448:	2b00      	cmp	r3, #0
 800144a:	d108      	bne.n	800145e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800144c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	431a      	orrs	r2, r3
 800145a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800145c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7e5b      	ldrb	r3, [r3, #25]
 8001462:	035b      	lsls	r3, r3, #13
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001468:	2a01      	cmp	r2, #1
 800146a:	d002      	beq.n	8001472 <HAL_ADC_Init+0x22e>
 800146c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001470:	e000      	b.n	8001474 <HAL_ADC_Init+0x230>
 8001472:	2200      	movs	r2, #0
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4313      	orrs	r3, r2
 8001482:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001484:	4313      	orrs	r3, r2
 8001486:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d11b      	bne.n	80014ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e5b      	ldrb	r3, [r3, #25]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	3b01      	subs	r3, #1
 80014a0:	045a      	lsls	r2, r3, #17
 80014a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014a4:	4313      	orrs	r3, r2
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80014ac:	e00d      	b.n	80014ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80014b6:	f043 0220 	orr.w	r2, r3, #32
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f043 0201 	orr.w	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d03a      	beq.n	8001548 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_ADC_Init+0x2ec>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d004      	beq.n	80014e6 <HAL_ADC_Init+0x2a2>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_ADC_Init+0x2f0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d128      	bne.n	8001538 <HAL_ADC_Init+0x2f4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ea:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80014ee:	d012      	beq.n	8001516 <HAL_ADC_Init+0x2d2>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014f8:	d00a      	beq.n	8001510 <HAL_ADC_Init+0x2cc>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001502:	d002      	beq.n	800150a <HAL_ADC_Init+0x2c6>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	e018      	b.n	800153c <HAL_ADC_Init+0x2f8>
 800150a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800150e:	e015      	b.n	800153c <HAL_ADC_Init+0x2f8>
 8001510:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001514:	e012      	b.n	800153c <HAL_ADC_Init+0x2f8>
 8001516:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800151a:	e00f      	b.n	800153c <HAL_ADC_Init+0x2f8>
 800151c:	2000000c 	.word	0x2000000c
 8001520:	431bde83 	.word	0x431bde83
 8001524:	50000100 	.word	0x50000100
 8001528:	50000300 	.word	0x50000300
 800152c:	50000700 	.word	0x50000700
 8001530:	50000400 	.word	0x50000400
 8001534:	50000500 	.word	0x50000500
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001540:	4313      	orrs	r3, r2
 8001542:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001544:	4313      	orrs	r3, r2
 8001546:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d114      	bne.n	8001580 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e1b      	ldrb	r3, [r3, #24]
 800156e:	039a      	lsls	r2, r3, #14
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4313      	orrs	r3, r2
 800157a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800157c:	4313      	orrs	r3, r2
 800157e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <HAL_ADC_Init+0x3bc>)
 8001588:	4013      	ands	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001590:	430b      	orrs	r3, r1
 8001592:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10c      	bne.n	80015b6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f023 010f 	bic.w	r1, r3, #15
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b4:	e007      	b.n	80015c6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 020f 	bic.w	r2, r2, #15
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f023 0303 	bic.w	r3, r3, #3
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	@ 0x40
 80015dc:	e00a      	b.n	80015f4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f023 0312 	bic.w	r3, r3, #18
 80015e6:	f043 0210 	orr.w	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3768      	adds	r7, #104	@ 0x68
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	fff0c007 	.word	0xfff0c007

08001604 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 8123 	bne.w	8001866 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ADC_Start_IT+0x2a>
 800162a:	2302      	movs	r3, #2
 800162c:	e11e      	b.n	800186c <HAL_ADC_Start_IT+0x268>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f001 f81c 	bl	8002674 <ADC_Enable>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 810a 	bne.w	800185c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001664:	d004      	beq.n	8001670 <HAL_ADC_Start_IT+0x6c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a82      	ldr	r2, [pc, #520]	@ (8001874 <HAL_ADC_Start_IT+0x270>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d106      	bne.n	800167e <HAL_ADC_Start_IT+0x7a>
 8001670:	4b81      	ldr	r3, [pc, #516]	@ (8001878 <HAL_ADC_Start_IT+0x274>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2b00      	cmp	r3, #0
 800167a:	d010      	beq.n	800169e <HAL_ADC_Start_IT+0x9a>
 800167c:	e005      	b.n	800168a <HAL_ADC_Start_IT+0x86>
 800167e:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <HAL_ADC_Start_IT+0x278>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <HAL_ADC_Start_IT+0x9a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001692:	d004      	beq.n	800169e <HAL_ADC_Start_IT+0x9a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a79      	ldr	r2, [pc, #484]	@ (8001880 <HAL_ADC_Start_IT+0x27c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d115      	bne.n	80016ca <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d036      	beq.n	8001726 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016c8:	e02d      	b.n	8001726 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016de:	d004      	beq.n	80016ea <HAL_ADC_Start_IT+0xe6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a63      	ldr	r2, [pc, #396]	@ (8001874 <HAL_ADC_Start_IT+0x270>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10a      	bne.n	8001700 <HAL_ADC_Start_IT+0xfc>
 80016ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e008      	b.n	8001712 <HAL_ADC_Start_IT+0x10e>
 8001700:	4b5f      	ldr	r3, [pc, #380]	@ (8001880 <HAL_ADC_Start_IT+0x27c>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800171e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001732:	d106      	bne.n	8001742 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	f023 0206 	bic.w	r2, r3, #6
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001740:	e002      	b.n	8001748 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	221c      	movs	r2, #28
 8001756:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d110      	bne.n	8001782 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0204 	bic.w	r2, r2, #4
 800176e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0208 	orr.w	r2, r2, #8
 800177e:	605a      	str	r2, [r3, #4]
          break;
 8001780:	e008      	b.n	8001794 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 020c 	orr.w	r2, r2, #12
 8001790:	605a      	str	r2, [r3, #4]
          break;
 8001792:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0210 	bic.w	r2, r2, #16
 80017aa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017b4:	d004      	beq.n	80017c0 <HAL_ADC_Start_IT+0x1bc>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001874 <HAL_ADC_Start_IT+0x270>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d106      	bne.n	80017ce <HAL_ADC_Start_IT+0x1ca>
 80017c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_ADC_Start_IT+0x274>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d03e      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 80017cc:	e005      	b.n	80017da <HAL_ADC_Start_IT+0x1d6>
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_ADC_Start_IT+0x278>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d037      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e2:	d004      	beq.n	80017ee <HAL_ADC_Start_IT+0x1ea>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_ADC_Start_IT+0x270>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d106      	bne.n	80017fc <HAL_ADC_Start_IT+0x1f8>
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_ADC_Start_IT+0x274>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d027      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 80017fa:	e005      	b.n	8001808 <HAL_ADC_Start_IT+0x204>
 80017fc:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <HAL_ADC_Start_IT+0x278>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2b05      	cmp	r3, #5
 8001806:	d020      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001810:	d004      	beq.n	800181c <HAL_ADC_Start_IT+0x218>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_ADC_Start_IT+0x270>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d106      	bne.n	800182a <HAL_ADC_Start_IT+0x226>
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_ADC_Start_IT+0x274>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2b09      	cmp	r3, #9
 8001826:	d010      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 8001828:	e005      	b.n	8001836 <HAL_ADC_Start_IT+0x232>
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_ADC_Start_IT+0x278>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	2b09      	cmp	r3, #9
 8001834:	d009      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800183e:	d004      	beq.n	800184a <HAL_ADC_Start_IT+0x246>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_ADC_Start_IT+0x27c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10f      	bne.n	800186a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0204 	orr.w	r2, r2, #4
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e006      	b.n	800186a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001864:	e001      	b.n	800186a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001866:	2302      	movs	r3, #2
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	50000100 	.word	0x50000100
 8001878:	50000300 	.word	0x50000300
 800187c:	50000700 	.word	0x50000700
 8001880:	50000400 	.word	0x50000400

08001884 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <HAL_ADC_IRQHandler+0x38>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80bc 	beq.w	8001a5c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80b6 	beq.w	8001a5c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001910:	d004      	beq.n	800191c <HAL_ADC_IRQHandler+0x7c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a90      	ldr	r2, [pc, #576]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d106      	bne.n	800192a <HAL_ADC_IRQHandler+0x8a>
 800191c:	4b8f      	ldr	r3, [pc, #572]	@ (8001b5c <HAL_ADC_IRQHandler+0x2bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	2b00      	cmp	r3, #0
 8001926:	d03e      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 8001928:	e005      	b.n	8001936 <HAL_ADC_IRQHandler+0x96>
 800192a:	4b8d      	ldr	r3, [pc, #564]	@ (8001b60 <HAL_ADC_IRQHandler+0x2c0>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b00      	cmp	r3, #0
 8001934:	d037      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800193e:	d004      	beq.n	800194a <HAL_ADC_IRQHandler+0xaa>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a84      	ldr	r2, [pc, #528]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d106      	bne.n	8001958 <HAL_ADC_IRQHandler+0xb8>
 800194a:	4b84      	ldr	r3, [pc, #528]	@ (8001b5c <HAL_ADC_IRQHandler+0x2bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2b05      	cmp	r3, #5
 8001954:	d027      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 8001956:	e005      	b.n	8001964 <HAL_ADC_IRQHandler+0xc4>
 8001958:	4b81      	ldr	r3, [pc, #516]	@ (8001b60 <HAL_ADC_IRQHandler+0x2c0>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2b05      	cmp	r3, #5
 8001962:	d020      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800196c:	d004      	beq.n	8001978 <HAL_ADC_IRQHandler+0xd8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a79      	ldr	r2, [pc, #484]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d106      	bne.n	8001986 <HAL_ADC_IRQHandler+0xe6>
 8001978:	4b78      	ldr	r3, [pc, #480]	@ (8001b5c <HAL_ADC_IRQHandler+0x2bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2b09      	cmp	r3, #9
 8001982:	d010      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 8001984:	e005      	b.n	8001992 <HAL_ADC_IRQHandler+0xf2>
 8001986:	4b76      	ldr	r3, [pc, #472]	@ (8001b60 <HAL_ADC_IRQHandler+0x2c0>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	2b09      	cmp	r3, #9
 8001990:	d009      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800199a:	d004      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x106>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a70      	ldr	r2, [pc, #448]	@ (8001b64 <HAL_ADC_IRQHandler+0x2c4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d104      	bne.n	80019b0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	e00f      	b.n	80019d0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019b8:	d004      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x124>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a66      	ldr	r2, [pc, #408]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_ADC_IRQHandler+0x12a>
 80019c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019c8:	e000      	b.n	80019cc <HAL_ADC_IRQHandler+0x12c>
 80019ca:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_ADC_IRQHandler+0x2c4>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d137      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d132      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d02d      	beq.n	8001a4e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11a      	bne.n	8001a36 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 020c 	bic.w	r2, r2, #12
 8001a0e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d112      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a34:	e00b      	b.n	8001a4e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f043 0210 	orr.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fc46 	bl	80002e0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x1d0>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10b      	bne.n	8001a88 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8138 	beq.w	8001cec <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8132 	beq.w	8001cec <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_IRQHandler+0x208>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x216>
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <HAL_ADC_IRQHandler+0x2bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d03e      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001ab4:	e005      	b.n	8001ac2 <HAL_ADC_IRQHandler+0x222>
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <HAL_ADC_IRQHandler+0x2c0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d037      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aca:	d004      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x236>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a21      	ldr	r2, [pc, #132]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_IRQHandler+0x244>
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_ADC_IRQHandler+0x2bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d027      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001ae2:	e005      	b.n	8001af0 <HAL_ADC_IRQHandler+0x250>
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_ADC_IRQHandler+0x2c0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d020      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001af8:	d004      	beq.n	8001b04 <HAL_ADC_IRQHandler+0x264>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d106      	bne.n	8001b12 <HAL_ADC_IRQHandler+0x272>
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_ADC_IRQHandler+0x2bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	d010      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001b10:	e005      	b.n	8001b1e <HAL_ADC_IRQHandler+0x27e>
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <HAL_ADC_IRQHandler+0x2c0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	d009      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b26:	d004      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x292>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_ADC_IRQHandler+0x2c4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d104      	bne.n	8001b3c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e018      	b.n	8001b6e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b44:	d004      	beq.n	8001b50 <HAL_ADC_IRQHandler+0x2b0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <HAL_ADC_IRQHandler+0x2b8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10b      	bne.n	8001b68 <HAL_ADC_IRQHandler+0x2c8>
 8001b50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b54:	e009      	b.n	8001b6a <HAL_ADC_IRQHandler+0x2ca>
 8001b56:	bf00      	nop
 8001b58:	50000100 	.word	0x50000100
 8001b5c:	50000300 	.word	0x50000300
 8001b60:	50000700 	.word	0x50000700
 8001b64:	50000400 	.word	0x50000400
 8001b68:	4b92      	ldr	r3, [pc, #584]	@ (8001db4 <HAL_ADC_IRQHandler+0x514>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b74:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 80b0 	bne.w	8001cde <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80a3 	bne.w	8001cde <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 809d 	bne.w	8001cde <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8097 	beq.w	8001cde <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x324>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8001db8 <HAL_ADC_IRQHandler+0x518>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_IRQHandler+0x332>
 8001bc4:	4b7d      	ldr	r3, [pc, #500]	@ (8001dbc <HAL_ADC_IRQHandler+0x51c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d03e      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001bd0:	e005      	b.n	8001bde <HAL_ADC_IRQHandler+0x33e>
 8001bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc0 <HAL_ADC_IRQHandler+0x520>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d037      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_IRQHandler+0x352>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a72      	ldr	r2, [pc, #456]	@ (8001db8 <HAL_ADC_IRQHandler+0x518>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d106      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x360>
 8001bf2:	4b72      	ldr	r3, [pc, #456]	@ (8001dbc <HAL_ADC_IRQHandler+0x51c>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d027      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001bfe:	e005      	b.n	8001c0c <HAL_ADC_IRQHandler+0x36c>
 8001c00:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc0 <HAL_ADC_IRQHandler+0x520>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d020      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c14:	d004      	beq.n	8001c20 <HAL_ADC_IRQHandler+0x380>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a67      	ldr	r2, [pc, #412]	@ (8001db8 <HAL_ADC_IRQHandler+0x518>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_IRQHandler+0x38e>
 8001c20:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <HAL_ADC_IRQHandler+0x51c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d010      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001c2c:	e005      	b.n	8001c3a <HAL_ADC_IRQHandler+0x39a>
 8001c2e:	4b64      	ldr	r3, [pc, #400]	@ (8001dc0 <HAL_ADC_IRQHandler+0x520>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2b07      	cmp	r3, #7
 8001c38:	d009      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x3ae>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5a      	ldr	r2, [pc, #360]	@ (8001db4 <HAL_ADC_IRQHandler+0x514>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d104      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	e00f      	b.n	8001c78 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c60:	d004      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x3cc>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a54      	ldr	r2, [pc, #336]	@ (8001db8 <HAL_ADC_IRQHandler+0x518>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d102      	bne.n	8001c72 <HAL_ADC_IRQHandler+0x3d2>
 8001c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c70:	e000      	b.n	8001c74 <HAL_ADC_IRQHandler+0x3d4>
 8001c72:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_ADC_IRQHandler+0x514>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d12d      	bne.n	8001cde <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11a      	bne.n	8001cc6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c9e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d112      	bne.n	8001cde <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cc4:	e00b      	b.n	8001cde <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f043 0210 	orr.w	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8c4 	bl	8001e6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2260      	movs	r2, #96	@ 0x60
 8001cea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d011      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x47a>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fa85 	bl	800121c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <HAL_ADC_IRQHandler+0x4aa>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8aa 	bl	8001e94 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d48:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_ADC_IRQHandler+0x4da>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f89c 	bl	8001ea8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d04f      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x584>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04a      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e02d      	b.n	8001df8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001da4:	d004      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x510>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a03      	ldr	r2, [pc, #12]	@ (8001db8 <HAL_ADC_IRQHandler+0x518>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d109      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x524>
 8001db0:	4b02      	ldr	r3, [pc, #8]	@ (8001dbc <HAL_ADC_IRQHandler+0x51c>)
 8001db2:	e008      	b.n	8001dc6 <HAL_ADC_IRQHandler+0x526>
 8001db4:	50000400 	.word	0x50000400
 8001db8:	50000100 	.word	0x50000100
 8001dbc:	50000300 	.word	0x50000300
 8001dc0:	50000700 	.word	0x50000700
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_ADC_IRQHandler+0x5c8>)
 8001dc6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10a      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e007      	b.n	8001df8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001df4:	2301      	movs	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10e      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fa0a 	bl	8001230 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2210      	movs	r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d018      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x5c0>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	f043 0208 	orr.w	r2, r3, #8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e58:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f810 	bl	8001e80 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	50000700 	.word	0x50000700

08001e6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b09b      	sub	sp, #108	@ 0x6c
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x22>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e2c8      	b.n	8002470 <HAL_ADC_ConfigChannel+0x5b4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 82ac 	bne.w	800244e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d81c      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	461a      	mov	r2, r3
 8001f12:	231f      	movs	r3, #31
 8001f14:	4093      	lsls	r3, r2
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4019      	ands	r1, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f36:	e063      	b.n	8002000 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	d81e      	bhi.n	8001f7e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	3b1e      	subs	r3, #30
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	3b1e      	subs	r3, #30
 8001f70:	fa00 f203 	lsl.w	r2, r0, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7c:	e040      	b.n	8002000 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b0e      	cmp	r3, #14
 8001f84:	d81e      	bhi.n	8001fc4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	3b3c      	subs	r3, #60	@ 0x3c
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4019      	ands	r1, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	3b3c      	subs	r3, #60	@ 0x3c
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fc2:	e01d      	b.n	8002000 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	3b5a      	subs	r3, #90	@ 0x5a
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4019      	ands	r1, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	3b5a      	subs	r3, #90	@ 0x5a
 8001ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80e5 	bne.w	80021da <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b09      	cmp	r3, #9
 8002016:	d91c      	bls.n	8002052 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6999      	ldr	r1, [r3, #24]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	3b1e      	subs	r3, #30
 800202a:	2207      	movs	r2, #7
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6898      	ldr	r0, [r3, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	3b1e      	subs	r3, #30
 8002044:	fa00 f203 	lsl.w	r2, r0, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	e019      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6959      	ldr	r1, [r3, #20]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	2207      	movs	r2, #7
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	4019      	ands	r1, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6898      	ldr	r0, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d84f      	bhi.n	8002148 <HAL_ADC_ConfigChannel+0x28c>
 80020a8:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <HAL_ADC_ConfigChannel+0x1f4>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	080020e3 	.word	0x080020e3
 80020b8:	08002105 	.word	0x08002105
 80020bc:	08002127 	.word	0x08002127
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020c6:	4b99      	ldr	r3, [pc, #612]	@ (800232c <HAL_ADC_ConfigChannel+0x470>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	0691      	lsls	r1, r2, #26
 80020d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020d2:	430a      	orrs	r2, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80020de:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020e0:	e07b      	b.n	80021da <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020e8:	4b90      	ldr	r3, [pc, #576]	@ (800232c <HAL_ADC_ConfigChannel+0x470>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	0691      	lsls	r1, r2, #26
 80020f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020f4:	430a      	orrs	r2, r1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002100:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002102:	e06a      	b.n	80021da <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800210a:	4b88      	ldr	r3, [pc, #544]	@ (800232c <HAL_ADC_ConfigChannel+0x470>)
 800210c:	4013      	ands	r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	0691      	lsls	r1, r2, #26
 8002114:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002116:	430a      	orrs	r2, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002122:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002124:	e059      	b.n	80021da <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800212c:	4b7f      	ldr	r3, [pc, #508]	@ (800232c <HAL_ADC_ConfigChannel+0x470>)
 800212e:	4013      	ands	r3, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	0691      	lsls	r1, r2, #26
 8002136:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002138:	430a      	orrs	r2, r1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002144:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002146:	e048      	b.n	80021da <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	069b      	lsls	r3, r3, #26
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800216a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	069b      	lsls	r3, r3, #26
 800217c:	429a      	cmp	r2, r3
 800217e:	d107      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800218e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002196:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	069b      	lsls	r3, r3, #26
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d107      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021b2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	069b      	lsls	r3, r3, #26
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80021d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80021d8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d108      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x33e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x33e>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x340>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8131 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d00f      	beq.n	800222a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002228:	e049      	b.n	80022be <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	409a      	lsls	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b09      	cmp	r3, #9
 800224a:	d91c      	bls.n	8002286 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6999      	ldr	r1, [r3, #24]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	3b1b      	subs	r3, #27
 800225e:	2207      	movs	r2, #7
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4019      	ands	r1, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6898      	ldr	r0, [r3, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	3b1b      	subs	r3, #27
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	619a      	str	r2, [r3, #24]
 8002284:	e01b      	b.n	80022be <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6959      	ldr	r1, [r3, #20]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	2207      	movs	r2, #7
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	4019      	ands	r1, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6898      	ldr	r0, [r3, #8]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022c6:	d004      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x416>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a18      	ldr	r2, [pc, #96]	@ (8002330 <HAL_ADC_ConfigChannel+0x474>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x41a>
 80022d2:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_ADC_ConfigChannel+0x478>)
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x41c>
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <HAL_ADC_ConfigChannel+0x47c>)
 80022d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d105      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	d105      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002306:	2b12      	cmp	r3, #18
 8002308:	f040 80ac 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800230c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 80a5 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002322:	d10b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x480>
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <HAL_ADC_ConfigChannel+0x474>)
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e023      	b.n	8002372 <HAL_ADC_ConfigChannel+0x4b6>
 800232a:	bf00      	nop
 800232c:	83fff000 	.word	0x83fff000
 8002330:	50000100 	.word	0x50000100
 8002334:	50000300 	.word	0x50000300
 8002338:	50000700 	.word	0x50000700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4e      	ldr	r2, [pc, #312]	@ (800247c <HAL_ADC_ConfigChannel+0x5c0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d103      	bne.n	800234e <HAL_ADC_ConfigChannel+0x492>
 8002346:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e011      	b.n	8002372 <HAL_ADC_ConfigChannel+0x4b6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4b      	ldr	r2, [pc, #300]	@ (8002480 <HAL_ADC_ConfigChannel+0x5c4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_ADC_ConfigChannel+0x4a2>
 8002358:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <HAL_ADC_ConfigChannel+0x5c8>)
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e009      	b.n	8002372 <HAL_ADC_ConfigChannel+0x4b6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a48      	ldr	r2, [pc, #288]	@ (8002484 <HAL_ADC_ConfigChannel+0x5c8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d102      	bne.n	800236e <HAL_ADC_ConfigChannel+0x4b2>
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <HAL_ADC_ConfigChannel+0x5c4>)
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e001      	b.n	8002372 <HAL_ADC_ConfigChannel+0x4b6>
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d108      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x4d6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x4d6>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_ADC_ConfigChannel+0x4d8>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d150      	bne.n	800243a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002398:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x4fe>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x4fe>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_ADC_ConfigChannel+0x500>
 80023ba:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d13c      	bne.n	800243a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d11d      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x548>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d0:	d118      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023dc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023de:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <HAL_ADC_ConfigChannel+0x5cc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2a      	ldr	r2, [pc, #168]	@ (800248c <HAL_ADC_ConfigChannel+0x5d0>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	0c9a      	lsrs	r2, r3, #18
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f4:	e002      	b.n	80023fc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002402:	e02e      	b.n	8002462 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b11      	cmp	r3, #17
 800240a:	d10b      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x568>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002414:	d106      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800241e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002420:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002422:	e01e      	b.n	8002462 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d11a      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800242c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002436:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002438:	e013      	b.n	8002462 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800244c:	e00a      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002460:	e000      	b.n	8002464 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002462:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800246c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002470:	4618      	mov	r0, r3
 8002472:	376c      	adds	r7, #108	@ 0x6c
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	50000100 	.word	0x50000100
 8002480:	50000400 	.word	0x50000400
 8002484:	50000500 	.word	0x50000500
 8002488:	2000000c 	.word	0x2000000c
 800248c:	431bde83 	.word	0x431bde83

08002490 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002490:	b480      	push	{r7}
 8002492:	b099      	sub	sp, #100	@ 0x64
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a8:	d102      	bne.n	80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	e01a      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d103      	bne.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80024ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	e011      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a67      	ldr	r2, [pc, #412]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d102      	bne.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024cc:	4b66      	ldr	r3, [pc, #408]	@ (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	e009      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a64      	ldr	r2, [pc, #400]	@ (8002668 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d102      	bne.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024dc:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	e001      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b0      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0a9      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 808d 	bne.w	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 8086 	bne.w	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800252c:	d004      	beq.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4b      	ldr	r2, [pc, #300]	@ (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800253a:	e000      	b.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800253c:	4b4c      	ldr	r3, [pc, #304]	@ (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800253e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d040      	beq.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800255a:	035b      	lsls	r3, r3, #13
 800255c:	430b      	orrs	r3, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002562:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d15c      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80025a6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d14b      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025b4:	f023 030f 	bic.w	r3, r3, #15
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	6811      	ldr	r1, [r2, #0]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	6892      	ldr	r2, [r2, #8]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025c6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025c8:	e03c      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d108      	bne.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d123      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002618:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800261e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800262c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800262e:	e009      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002642:	e000      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800264e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002652:	4618      	mov	r0, r3
 8002654:	3764      	adds	r7, #100	@ 0x64
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	50000100 	.word	0x50000100
 8002664:	50000400 	.word	0x50000400
 8002668:	50000500 	.word	0x50000500
 800266c:	50000300 	.word	0x50000300
 8002670:	50000700 	.word	0x50000700

08002674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <ADC_Enable+0x2c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <ADC_Enable+0x2c>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <ADC_Enable+0x2e>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d143      	bne.n	800272e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <ADC_Enable+0xc4>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	f043 0210 	orr.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e02f      	b.n	8002730 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80026e0:	f7fe fd6c 	bl	80011bc <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026e6:	e01b      	b.n	8002720 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e8:	f7fe fd68 	bl	80011bc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d914      	bls.n	8002720 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d00d      	beq.n	8002720 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f043 0210 	orr.w	r2, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d1dc      	bne.n	80026e8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	8000003f 	.word	0x8000003f

0800273c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <ADC_Disable+0x2c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <ADC_Disable+0x2c>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <ADC_Disable+0x2e>
 8002768:	2300      	movs	r3, #0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d047      	beq.n	80027fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030d 	and.w	r3, r3, #13
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10f      	bne.n	800279c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0202 	orr.w	r2, r2, #2
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2203      	movs	r2, #3
 8002792:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002794:	f7fe fd12 	bl	80011bc <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800279a:	e029      	b.n	80027f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f043 0210 	orr.w	r2, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e023      	b.n	8002800 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027b8:	f7fe fd00 	bl	80011bc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d914      	bls.n	80027f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10d      	bne.n	80027f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d0dc      	beq.n	80027b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4907      	ldr	r1, [pc, #28]	@ (80028a4 <__NVIC_EnableIRQ+0x38>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	@ (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	@ 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	@ 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff8e 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff29 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff3e 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff8e 	bl	80028fc <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5d 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff31 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e02e      	b.n	8002a9a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d008      	beq.n	8002a58 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e020      	b.n	8002a9a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020e 	bic.w	r2, r2, #14
 8002a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d005      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e027      	b.n	8002b18 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
    }
  }
  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e154      	b.n	8002dde <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8146 	beq.w	8002dd8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x40>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d017      	beq.n	8002c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d123      	bne.n	8002c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	6939      	ldr	r1, [r7, #16]
 8002c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80a0 	beq.w	8002dd8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c98:	4b58      	ldr	r3, [pc, #352]	@ (8002dfc <HAL_GPIO_Init+0x2d8>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	@ (8002dfc <HAL_GPIO_Init+0x2d8>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6193      	str	r3, [r2, #24]
 8002ca4:	4b55      	ldr	r3, [pc, #340]	@ (8002dfc <HAL_GPIO_Init+0x2d8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb0:	4a53      	ldr	r2, [pc, #332]	@ (8002e00 <HAL_GPIO_Init+0x2dc>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cda:	d019      	beq.n	8002d10 <HAL_GPIO_Init+0x1ec>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a49      	ldr	r2, [pc, #292]	@ (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d013      	beq.n	8002d0c <HAL_GPIO_Init+0x1e8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a48      	ldr	r2, [pc, #288]	@ (8002e08 <HAL_GPIO_Init+0x2e4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00d      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a47      	ldr	r2, [pc, #284]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <HAL_GPIO_Init+0x1e0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a46      	ldr	r2, [pc, #280]	@ (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d101      	bne.n	8002d00 <HAL_GPIO_Init+0x1dc>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e008      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d04:	2303      	movs	r3, #3
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d10:	2300      	movs	r3, #0
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d22:	4937      	ldr	r1, [pc, #220]	@ (8002e00 <HAL_GPIO_Init+0x2dc>)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d30:	4b38      	ldr	r3, [pc, #224]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d54:	4a2f      	ldr	r2, [pc, #188]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d7e:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d84:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002da8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dae:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dd2:	4a10      	ldr	r2, [pc, #64]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f aea3 	bne.w	8002b34 <HAL_GPIO_Init+0x10>
  }
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010000 	.word	0x40010000
 8002e04:	48000400 	.word	0x48000400
 8002e08:	48000800 	.word	0x48000800
 8002e0c:	48000c00 	.word	0x48000c00
 8002e10:	48001000 	.word	0x48001000
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e34:	e002      	b.n	8002e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd f9d2 	bl	8000210 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e08d      	b.n	8002fa6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fedc 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	@ 0x24
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	e006      	b.n	8002f00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002efe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d108      	bne.n	8002f1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	e007      	b.n	8002f2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69d9      	ldr	r1, [r3, #28]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d138      	bne.n	8003036 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e032      	b.n	8003038 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	@ 0x24
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003000:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	d139      	bne.n	80030ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003064:	2302      	movs	r3, #2
 8003066:	e033      	b.n	80030d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	@ 0x24
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0b9      	b.n	8003262 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd ff2c 	bl	8000f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f004 fa49 	bl	80075ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e03e      	b.n	800319e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3311      	adds	r3, #17
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	3310      	adds	r3, #16
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	3313      	adds	r3, #19
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	440b      	add	r3, r1
 800316a:	3320      	adds	r3, #32
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	3324      	adds	r3, #36	@ 0x24
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	440b      	add	r3, r1
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	3301      	adds	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3bb      	bcc.n	8003120 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e044      	b.n	8003238 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	3301      	adds	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	429a      	cmp	r2, r3
 8003240:	d3b5      	bcc.n	80031ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800324e:	f004 f9c8 	bl	80075e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003272:	af00      	add	r7, sp, #0
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800327c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f000 bff4 	b.w	800427a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 816d 	beq.w	8003582 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032a8:	4bb4      	ldr	r3, [pc, #720]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00c      	beq.n	80032ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b4:	4bb1      	ldr	r3, [pc, #708]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d157      	bne.n	8003370 <HAL_RCC_OscConfig+0x104>
 80032c0:	4bae      	ldr	r3, [pc, #696]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032cc:	d150      	bne.n	8003370 <HAL_RCC_OscConfig+0x104>
 80032ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80032ee:	d802      	bhi.n	80032f6 <HAL_RCC_OscConfig+0x8a>
 80032f0:	4ba2      	ldr	r3, [pc, #648]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0xb6>
 80032f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032fa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800330a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800330e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003312:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800331e:	4b97      	ldr	r3, [pc, #604]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003326:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800332a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800332e:	fa92 f2a2 	rbit	r2, r2
 8003332:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003336:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8114 	beq.w	8003580 <HAL_RCC_OscConfig+0x314>
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 810b 	bne.w	8003580 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f000 bf85 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x124>
 8003382:	4b7e      	ldr	r3, [pc, #504]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7d      	ldr	r2, [pc, #500]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e036      	b.n	80033fe <HAL_RCC_OscConfig+0x192>
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x14e>
 80033a0:	4b76      	ldr	r3, [pc, #472]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a75      	ldr	r2, [pc, #468]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b73      	ldr	r3, [pc, #460]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a72      	ldr	r2, [pc, #456]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	e021      	b.n	80033fe <HAL_RCC_OscConfig+0x192>
 80033ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x17a>
 80033cc:	4b6b      	ldr	r3, [pc, #428]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b68      	ldr	r3, [pc, #416]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a67      	ldr	r2, [pc, #412]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0x192>
 80033e6:	4b65      	ldr	r3, [pc, #404]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a64      	ldr	r2, [pc, #400]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b62      	ldr	r3, [pc, #392]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a61      	ldr	r2, [pc, #388]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 80033f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033fe:	4b5f      	ldr	r3, [pc, #380]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003402:	f023 020f 	bic.w	r2, r3, #15
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	495a      	ldr	r1, [pc, #360]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d054      	beq.n	80034d2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd fec8 	bl	80011bc <HAL_GetTick>
 800342c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003432:	f7fd fec3 	bl	80011bc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	@ 0x64
 8003440:	d902      	bls.n	8003448 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	f000 bf19 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
 8003448:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800344c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800345c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b3f      	cmp	r3, #63	@ 0x3f
 8003468:	d802      	bhi.n	8003470 <HAL_RCC_OscConfig+0x204>
 800346a:	4b44      	ldr	r3, [pc, #272]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	e015      	b.n	800349c <HAL_RCC_OscConfig+0x230>
 8003470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003474:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003484:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003488:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800348c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003498:	4b38      	ldr	r3, [pc, #224]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034a0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80034a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80034b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f002 021f 	and.w	r2, r2, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0b0      	beq.n	8003432 <HAL_RCC_OscConfig+0x1c6>
 80034d0:	e057      	b.n	8003582 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fe73 	bl	80011bc <HAL_GetTick>
 80034d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fd fe6e 	bl	80011bc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b64      	cmp	r3, #100	@ 0x64
 80034ea:	d902      	bls.n	80034f2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	f000 bec4 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
 80034f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034f6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003506:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b3f      	cmp	r3, #63	@ 0x3f
 8003512:	d802      	bhi.n	800351a <HAL_RCC_OscConfig+0x2ae>
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x2da>
 800351a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800351e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800352e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003532:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003536:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003542:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <HAL_RCC_OscConfig+0x310>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800354a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800354e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003552:	fa92 f2a2 	rbit	r2, r2
 8003556:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800355a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800355e:	fab2 f282 	clz	r2, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f042 0220 	orr.w	r2, r2, #32
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f002 021f 	and.w	r2, r2, #31
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1b0      	bne.n	80034dc <HAL_RCC_OscConfig+0x270>
 800357a:	e002      	b.n	8003582 <HAL_RCC_OscConfig+0x316>
 800357c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 816c 	beq.w	8003870 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003598:	4bcc      	ldr	r3, [pc, #816]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035a4:	4bc9      	ldr	r3, [pc, #804]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d16d      	bne.n	800368c <HAL_RCC_OscConfig+0x420>
 80035b0:	4bc6      	ldr	r3, [pc, #792]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d167      	bne.n	800368c <HAL_RCC_OscConfig+0x420>
 80035bc:	2302      	movs	r3, #2
 80035be:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80035ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80035da:	d802      	bhi.n	80035e2 <HAL_RCC_OscConfig+0x376>
 80035dc:	4bbb      	ldr	r3, [pc, #748]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	e013      	b.n	800360a <HAL_RCC_OscConfig+0x39e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035f4:	2302      	movs	r3, #2
 80035f6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80035fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003606:	4bb1      	ldr	r3, [pc, #708]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2202      	movs	r2, #2
 800360c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003610:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003614:	fa92 f2a2 	rbit	r2, r2
 8003618:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800361c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003620:	fab2 f282 	clz	r2, r2
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	f042 0220 	orr.w	r2, r2, #32
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f002 021f 	and.w	r2, r2, #31
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f202 	lsl.w	r2, r1, r2
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCC_OscConfig+0x3e6>
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f000 be14 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b9e      	ldr	r3, [pc, #632]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	21f8      	movs	r1, #248	@ 0xf8
 8003668:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003670:	fa91 f1a1 	rbit	r1, r1
 8003674:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003678:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800367c:	fab1 f181 	clz	r1, r1
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	408b      	lsls	r3, r1
 8003684:	4991      	ldr	r1, [pc, #580]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	e0f1      	b.n	8003870 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003690:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8083 	beq.w	80037a4 <HAL_RCC_OscConfig+0x538>
 800369e:	2301      	movs	r3, #1
 80036a0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80036b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	461a      	mov	r2, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd fd77 	bl	80011bc <HAL_GetTick>
 80036ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fd fd72 	bl	80011bc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d902      	bls.n	80036ea <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f000 bdc8 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80036fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b3f      	cmp	r3, #63	@ 0x3f
 8003708:	d802      	bhi.n	8003710 <HAL_RCC_OscConfig+0x4a4>
 800370a:	4b70      	ldr	r3, [pc, #448]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e013      	b.n	8003738 <HAL_RCC_OscConfig+0x4cc>
 8003710:	2302      	movs	r3, #2
 8003712:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003722:	2302      	movs	r3, #2
 8003724:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003728:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003734:	4b65      	ldr	r3, [pc, #404]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	2202      	movs	r2, #2
 800373a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800373e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800374a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800374e:	fab2 f282 	clz	r2, r2
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f002 021f 	and.w	r2, r2, #31
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0b4      	beq.n	80036d4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b58      	ldr	r3, [pc, #352]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	21f8      	movs	r1, #248	@ 0xf8
 8003780:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003788:	fa91 f1a1 	rbit	r1, r1
 800378c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003790:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003794:	fab1 f181 	clz	r1, r1
 8003798:	b2c9      	uxtb	r1, r1
 800379a:	408b      	lsls	r3, r1
 800379c:	494b      	ldr	r1, [pc, #300]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	e065      	b.n	8003870 <HAL_RCC_OscConfig+0x604>
 80037a4:	2301      	movs	r3, #1
 80037a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80037b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fcf4 	bl	80011bc <HAL_GetTick>
 80037d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fd fcef 	bl	80011bc <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	f000 bd45 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003802:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b3f      	cmp	r3, #63	@ 0x3f
 800380e:	d802      	bhi.n	8003816 <HAL_RCC_OscConfig+0x5aa>
 8003810:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	e013      	b.n	800383e <HAL_RCC_OscConfig+0x5d2>
 8003816:	2302      	movs	r3, #2
 8003818:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003828:	2302      	movs	r3, #2
 800382a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800382e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_OscConfig+0x660>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	2202      	movs	r2, #2
 8003840:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003844:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003848:	fa92 f2a2 	rbit	r2, r2
 800384c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003850:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003854:	fab2 f282 	clz	r2, r2
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f042 0220 	orr.w	r2, r2, #32
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f002 021f 	and.w	r2, r2, #31
 8003864:	2101      	movs	r1, #1
 8003866:	fa01 f202 	lsl.w	r2, r1, r2
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1b4      	bne.n	80037da <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8115 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d07e      	beq.n	8003994 <HAL_RCC_OscConfig+0x728>
 8003896:	2301      	movs	r3, #1
 8003898:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_OscConfig+0x664>)
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	2301      	movs	r3, #1
 80038be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c0:	f7fd fc7c 	bl	80011bc <HAL_GetTick>
 80038c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c8:	e00f      	b.n	80038ea <HAL_RCC_OscConfig+0x67e>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fd fc72 	bl	80011bc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d902      	bls.n	80038ea <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	f000 bcc8 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003904:	2202      	movs	r2, #2
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	fa93 f2a3 	rbit	r2, r3
 8003916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003928:	2202      	movs	r2, #2
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003942:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003944:	4bb0      	ldr	r3, [pc, #704]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003950:	2102      	movs	r1, #2
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003958:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f1a3 	rbit	r1, r3
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800396a:	6019      	str	r1, [r3, #0]
  return result;
 800396c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003970:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0a0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x668>
 8003992:	e08d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x844>
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fa93 f2a3 	rbit	r2, r3
 80039ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039b6:	601a      	str	r2, [r3, #0]
  return result;
 80039b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039bc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80039c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b90      	ldr	r3, [pc, #576]	@ (8003c0c <HAL_RCC_OscConfig+0x9a0>)
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	461a      	mov	r2, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d6:	f7fd fbf1 	bl	80011bc <HAL_GetTick>
 80039da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fd fbec 	bl	80011bc <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d902      	bls.n	80039f6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	f000 bc42 	b.w	800427a <HAL_RCC_OscConfig+0x100e>
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039fe:	2202      	movs	r2, #2
 8003a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f2a3 	rbit	r2, r3
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a22:	2202      	movs	r2, #2
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	fa93 f2a3 	rbit	r2, r3
 8003a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a46:	2202      	movs	r2, #2
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	fa93 f2a3 	rbit	r2, r3
 8003a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a62:	4b69      	ldr	r3, [pc, #420]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a6e:	2102      	movs	r1, #2
 8003a70:	6019      	str	r1, [r3, #0]
 8003a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f1a3 	rbit	r1, r3
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a88:	6019      	str	r1, [r3, #0]
  return result;
 8003a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d197      	bne.n	80039e0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 819e 	beq.w	8003e02 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003acc:	4b4e      	ldr	r3, [pc, #312]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d116      	bne.n	8003b06 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a4a      	ldr	r2, [pc, #296]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	61d3      	str	r3, [r2, #28]
 8003ae4:	4b48      	ldr	r3, [pc, #288]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003afe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b42      	ldr	r3, [pc, #264]	@ (8003c10 <HAL_RCC_OscConfig+0x9a4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11a      	bne.n	8003b48 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b12:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <HAL_RCC_OscConfig+0x9a4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3e      	ldr	r2, [pc, #248]	@ (8003c10 <HAL_RCC_OscConfig+0x9a4>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fb4d 	bl	80011bc <HAL_GetTick>
 8003b22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	e009      	b.n	8003b3c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fd fb48 	bl	80011bc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b64      	cmp	r3, #100	@ 0x64
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e39e      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b34      	ldr	r3, [pc, #208]	@ (8003c10 <HAL_RCC_OscConfig+0x9a4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x8fa>
 8003b58:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e035      	b.n	8003bd2 <HAL_RCC_OscConfig+0x966>
 8003b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x924>
 8003b76:	4b24      	ldr	r3, [pc, #144]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6213      	str	r3, [r2, #32]
 8003b82:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a20      	ldr	r2, [pc, #128]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	e020      	b.n	8003bd2 <HAL_RCC_OscConfig+0x966>
 8003b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d10c      	bne.n	8003bba <HAL_RCC_OscConfig+0x94e>
 8003ba0:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003ba6:	f043 0304 	orr.w	r3, r3, #4
 8003baa:	6213      	str	r3, [r2, #32]
 8003bac:	4b16      	ldr	r3, [pc, #88]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x966>
 8003bba:	4b13      	ldr	r3, [pc, #76]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4a12      	ldr	r2, [pc, #72]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6213      	str	r3, [r2, #32]
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4a0f      	ldr	r2, [pc, #60]	@ (8003c08 <HAL_RCC_OscConfig+0x99c>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8087 	beq.w	8003cf2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7fd faea 	bl	80011bc <HAL_GetTick>
 8003be8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e012      	b.n	8003c14 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd fae5 	bl	80011bc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d908      	bls.n	8003c14 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e339      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	10908120 	.word	0x10908120
 8003c10:	40007000 	.word	0x40007000
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	fa93 f2a3 	rbit	r2, r3
 8003c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c32:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c40:	2202      	movs	r2, #2
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	fa93 f2a3 	rbit	r2, r3
 8003c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c5a:	601a      	str	r2, [r3, #0]
  return result;
 8003c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c60:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <HAL_RCC_OscConfig+0xa10>
 8003c76:	4b98      	ldr	r3, [pc, #608]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	e013      	b.n	8003ca4 <HAL_RCC_OscConfig+0xa38>
 8003c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c84:	2202      	movs	r2, #2
 8003c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	fa93 f2a3 	rbit	r2, r3
 8003c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ca8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cac:	2102      	movs	r1, #2
 8003cae:	6011      	str	r1, [r2, #0]
 8003cb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cb4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	fa92 f1a2 	rbit	r1, r2
 8003cbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cc2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cc6:	6011      	str	r1, [r2, #0]
  return result;
 8003cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ccc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	fab2 f282 	clz	r2, r2
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f002 021f 	and.w	r2, r2, #31
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f43f af7f 	beq.w	8003bee <HAL_RCC_OscConfig+0x982>
 8003cf0:	e07d      	b.n	8003dee <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fa63 	bl	80011bc <HAL_GetTick>
 8003cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd fa5e 	bl	80011bc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e2b2      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
 8003d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d18:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d24:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d40:	2202      	movs	r2, #2
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	fa93 f2a3 	rbit	r2, r3
 8003d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d56:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d5a:	601a      	str	r2, [r3, #0]
  return result;
 8003d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d60:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_RCC_OscConfig+0xb10>
 8003d76:	4b58      	ldr	r3, [pc, #352]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	e013      	b.n	8003da4 <HAL_RCC_OscConfig+0xb38>
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d84:	2202      	movs	r2, #2
 8003d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003da8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003dac:	2102      	movs	r1, #2
 8003dae:	6011      	str	r1, [r2, #0]
 8003db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003db4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	fa92 f1a2 	rbit	r1, r2
 8003dbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dc2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003dc6:	6011      	str	r1, [r2, #0]
  return result;
 8003dc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dcc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	fab2 f282 	clz	r2, r2
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	f002 021f 	and.w	r2, r2, #31
 8003de2:	2101      	movs	r1, #1
 8003de4:	fa01 f202 	lsl.w	r2, r1, r2
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d186      	bne.n	8003cfc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dee:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4a37      	ldr	r2, [pc, #220]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8232 	beq.w	8004278 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e14:	4b30      	ldr	r3, [pc, #192]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	f000 8201 	beq.w	8004224 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	f040 8157 	bne.w	80040e2 <HAL_RCC_OscConfig+0xe76>
 8003e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e38:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e46:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e58:	601a      	str	r2, [r3, #0]
  return result;
 8003e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e62:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e64:	fab3 f383 	clz	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e6e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fd f99f 	bl	80011bc <HAL_GetTick>
 8003e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e82:	e009      	b.n	8003e98 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd f99a 	bl	80011bc <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1f0      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eaa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fa93 f2a3 	rbit	r2, r3
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ebc:	601a      	str	r2, [r3, #0]
  return result;
 8003ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003ec6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ed0:	d804      	bhi.n	8003edc <HAL_RCC_OscConfig+0xc70>
 8003ed2:	4b01      	ldr	r3, [pc, #4]	@ (8003ed8 <HAL_RCC_OscConfig+0xc6c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	e029      	b.n	8003f2c <HAL_RCC_OscConfig+0xcc0>
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f2a3 	rbit	r2, r3
 8003ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f06:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f14:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f22:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4bc3      	ldr	r3, [pc, #780]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f30:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f3e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	fa92 f1a2 	rbit	r1, r2
 8003f48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f4c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f50:	6011      	str	r1, [r2, #0]
  return result;
 8003f52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f56:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	fab2 f282 	clz	r2, r2
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	f042 0220 	orr.w	r2, r2, #32
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	f002 021f 	and.w	r2, r2, #31
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d185      	bne.n	8003e84 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f78:	4baf      	ldr	r3, [pc, #700]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	49a7      	ldr	r1, [pc, #668]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fa93 f2a3 	rbit	r2, r3
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fc4:	601a      	str	r2, [r3, #0]
  return result;
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003fce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fd f8e9 	bl	80011bc <HAL_GetTick>
 8003fea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fee:	e009      	b.n	8004004 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd f8e4 	bl	80011bc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e13a      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800400c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004016:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004028:	601a      	str	r2, [r3, #0]
  return result;
 800402a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b3f      	cmp	r3, #63	@ 0x3f
 800403c:	d802      	bhi.n	8004044 <HAL_RCC_OscConfig+0xdd8>
 800403e:	4b7e      	ldr	r3, [pc, #504]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	e027      	b.n	8004094 <HAL_RCC_OscConfig+0xe28>
 8004044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004048:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800404c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004056:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	fa93 f2a3 	rbit	r2, r3
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004072:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	fa93 f2a3 	rbit	r2, r3
 8004086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	4b69      	ldr	r3, [pc, #420]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004098:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800409c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040a0:	6011      	str	r1, [r2, #0]
 80040a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040a6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	fa92 f1a2 	rbit	r1, r2
 80040b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040b8:	6011      	str	r1, [r2, #0]
  return result;
 80040ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040be:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	fab2 f282 	clz	r2, r2
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	f042 0220 	orr.w	r2, r2, #32
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	f002 021f 	and.w	r2, r2, #31
 80040d4:	2101      	movs	r1, #1
 80040d6:	fa01 f202 	lsl.w	r2, r1, r2
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d087      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xd84>
 80040e0:	e0ca      	b.n	8004278 <HAL_RCC_OscConfig+0x100c>
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004106:	601a      	str	r2, [r3, #0]
  return result;
 8004108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004110:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800411c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fd f848 	bl	80011bc <HAL_GetTick>
 800412c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004130:	e009      	b.n	8004146 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004132:	f7fd f843 	bl	80011bc <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e099      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
 8004146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800414e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004158:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fa93 f2a3 	rbit	r2, r3
 8004162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004166:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800416a:	601a      	str	r2, [r3, #0]
  return result;
 800416c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004170:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004174:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b3f      	cmp	r3, #63	@ 0x3f
 800417e:	d802      	bhi.n	8004186 <HAL_RCC_OscConfig+0xf1a>
 8004180:	4b2d      	ldr	r3, [pc, #180]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	e027      	b.n	80041d6 <HAL_RCC_OscConfig+0xf6a>
 8004186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800418e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	fa93 f2a3 	rbit	r2, r3
 80041a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041be:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	fa93 f2a3 	rbit	r2, r3
 80041c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041cc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_RCC_OscConfig+0xfcc>)
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80041de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80041e2:	6011      	str	r1, [r2, #0]
 80041e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041e8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	fa92 f1a2 	rbit	r1, r2
 80041f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041fa:	6011      	str	r1, [r2, #0]
  return result;
 80041fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004200:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	fab2 f282 	clz	r2, r2
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	f042 0220 	orr.w	r2, r2, #32
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	f002 021f 	and.w	r2, r2, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f202 	lsl.w	r2, r1, r2
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d187      	bne.n	8004132 <HAL_RCC_OscConfig+0xec6>
 8004222:	e029      	b.n	8004278 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d103      	bne.n	800423c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e020      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
 8004238:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <HAL_RCC_OscConfig+0x1018>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004244:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004248:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800424c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	429a      	cmp	r2, r3
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800425c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004260:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b09e      	sub	sp, #120	@ 0x78
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e154      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b89      	ldr	r3, [pc, #548]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d910      	bls.n	80042d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b86      	ldr	r3, [pc, #536]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 0207 	bic.w	r2, r3, #7
 80042b6:	4984      	ldr	r1, [pc, #528]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b82      	ldr	r3, [pc, #520]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e13c      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b7b      	ldr	r3, [pc, #492]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4978      	ldr	r1, [pc, #480]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80cd 	beq.w	8004496 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d137      	bne.n	8004374 <HAL_RCC_ClockConfig+0xec>
 8004304:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004308:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b3f      	cmp	r3, #63	@ 0x3f
 800431c:	d802      	bhi.n	8004324 <HAL_RCC_ClockConfig+0x9c>
 800431e:	4b6b      	ldr	r3, [pc, #428]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	e00f      	b.n	8004344 <HAL_RCC_ClockConfig+0xbc>
 8004324:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004328:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	667b      	str	r3, [r7, #100]	@ 0x64
 8004332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004336:	663b      	str	r3, [r7, #96]	@ 0x60
 8004338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004340:	4b62      	ldr	r3, [pc, #392]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004348:	65ba      	str	r2, [r7, #88]	@ 0x58
 800434a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800434c:	fa92 f2a2 	rbit	r2, r2
 8004350:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004352:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004354:	fab2 f282 	clz	r2, r2
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f002 021f 	and.w	r2, r2, #31
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d171      	bne.n	8004454 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ea      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d137      	bne.n	80043ec <HAL_RCC_ClockConfig+0x164>
 800437c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004380:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004384:	fa93 f3a3 	rbit	r3, r3
 8004388:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800438a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	fab3 f383 	clz	r3, r3
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b3f      	cmp	r3, #63	@ 0x3f
 8004394:	d802      	bhi.n	800439c <HAL_RCC_ClockConfig+0x114>
 8004396:	4b4d      	ldr	r3, [pc, #308]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e00f      	b.n	80043bc <HAL_RCC_ClockConfig+0x134>
 800439c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b8:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043c4:	fa92 f2a2 	rbit	r2, r2
 80043c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80043ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043cc:	fab2 f282 	clz	r2, r2
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f042 0220 	orr.w	r2, r2, #32
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	f002 021f 	and.w	r2, r2, #31
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f202 	lsl.w	r2, r1, r2
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d135      	bne.n	8004454 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0ae      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
 80043ec:	2302      	movs	r3, #2
 80043ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b3f      	cmp	r3, #63	@ 0x3f
 8004402:	d802      	bhi.n	800440a <HAL_RCC_ClockConfig+0x182>
 8004404:	4b31      	ldr	r3, [pc, #196]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	e00d      	b.n	8004426 <HAL_RCC_ClockConfig+0x19e>
 800440a:	2302      	movs	r3, #2
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
 8004416:	2302      	movs	r3, #2
 8004418:	623b      	str	r3, [r7, #32]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	2202      	movs	r2, #2
 8004428:	61ba      	str	r2, [r7, #24]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	617a      	str	r2, [r7, #20]
  return result;
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f002 021f 	and.w	r2, r2, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e07a      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 0203 	bic.w	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	491a      	ldr	r1, [pc, #104]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004466:	f7fc fea9 	bl	80011bc <HAL_GetTick>
 800446a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446c:	e00a      	b.n	8004484 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446e:	f7fc fea5 	bl	80011bc <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e062      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004484:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <HAL_RCC_ClockConfig+0x244>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 020c 	and.w	r2, r3, #12
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	429a      	cmp	r2, r3
 8004494:	d1eb      	bne.n	800446e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004496:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d215      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a4:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 0207 	bic.w	r2, r3, #7
 80044ac:	4906      	ldr	r1, [pc, #24]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b4:	4b04      	ldr	r3, [pc, #16]	@ (80044c8 <HAL_RCC_ClockConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d006      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e041      	b.n	800454a <HAL_RCC_ClockConfig+0x2c2>
 80044c6:	bf00      	nop
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004554 <HAL_RCC_ClockConfig+0x2cc>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	491a      	ldr	r1, [pc, #104]	@ (8004554 <HAL_RCC_ClockConfig+0x2cc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fa:	4b16      	ldr	r3, [pc, #88]	@ (8004554 <HAL_RCC_ClockConfig+0x2cc>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4912      	ldr	r1, [pc, #72]	@ (8004554 <HAL_RCC_ClockConfig+0x2cc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800450e:	f000 f829 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8004512:	4601      	mov	r1, r0
 8004514:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <HAL_RCC_ClockConfig+0x2cc>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800451c:	22f0      	movs	r2, #240	@ 0xf0
 800451e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	fa92 f2a2 	rbit	r2, r2
 8004526:	60fa      	str	r2, [r7, #12]
  return result;
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	fab2 f282 	clz	r2, r2
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	40d3      	lsrs	r3, r2
 8004532:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x2d0>)
 8004534:	5cd3      	ldrb	r3, [r2, r3]
 8004536:	fa21 f303 	lsr.w	r3, r1, r3
 800453a:	4a08      	ldr	r2, [pc, #32]	@ (800455c <HAL_RCC_ClockConfig+0x2d4>)
 800453c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <HAL_RCC_ClockConfig+0x2d8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc fdf6 	bl	8001134 <HAL_InitTick>
  
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3778      	adds	r7, #120	@ 0x78
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	080076a8 	.word	0x080076a8
 800455c:	2000000c 	.word	0x2000000c
 8004560:	20000010 	.word	0x20000010

08004564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800457e:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d002      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x30>
 800458e:	2b08      	cmp	r3, #8
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x36>
 8004592:	e026      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004594:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004596:	613b      	str	r3, [r7, #16]
      break;
 8004598:	e026      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	0c9b      	lsrs	r3, r3, #18
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80045a8:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	4a14      	ldr	r2, [pc, #80]	@ (8004604 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045c0:	4a0e      	ldr	r2, [pc, #56]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x98>)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e004      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]
      break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x98>)
 80045e4:	613b      	str	r3, [r7, #16]
      break;
 80045e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e8:	693b      	ldr	r3, [r7, #16]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	007a1200 	.word	0x007a1200
 8004600:	080076c0 	.word	0x080076c0
 8004604:	080076d0 	.word	0x080076d0
 8004608:	003d0900 	.word	0x003d0900

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000000c 	.word	0x2000000c

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800462a:	f7ff ffef 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004638:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	080076b8 	.word	0x080076b8

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800466e:	f7ff ffcd 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004672:	4601      	mov	r1, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800467c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004680:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	fa92 f2a2 	rbit	r2, r2
 8004688:	603a      	str	r2, [r7, #0]
  return result;
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	40d3      	lsrs	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	080076b8 	.word	0x080076b8

080046ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	@ 0x48
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80d2 	beq.w	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a49      	ldr	r2, [pc, #292]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	61d3      	str	r3, [r2, #28]
 80046e8:	4b47      	ldr	r3, [pc, #284]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b44      	ldr	r3, [pc, #272]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b41      	ldr	r3, [pc, #260]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a40      	ldr	r2, [pc, #256]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004710:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fc fd53 	bl	80011bc <HAL_GetTick>
 8004716:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fc fd4f 	bl	80011bc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	@ 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e167      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b37      	ldr	r3, [pc, #220]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004738:	4b33      	ldr	r3, [pc, #204]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004740:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8082 	beq.w	800484e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004752:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004754:	429a      	cmp	r2, r3
 8004756:	d07a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004762:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004766:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	461a      	mov	r2, r3
 8004782:	2301      	movs	r3, #1
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800478a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	4b1c      	ldr	r3, [pc, #112]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047aa:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d049      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fc fcff 	bl	80011bc <HAL_GetTick>
 80047be:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fc fcfb 	bl	80011bc <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e111      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x350>
 80047d8:	2302      	movs	r3, #2
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e4:	2302      	movs	r3, #2
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
  return result;
 80047f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d108      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004802:	4b01      	ldr	r3, [pc, #4]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	e00d      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004808:	40021000 	.word	0x40021000
 800480c:	40007000 	.word	0x40007000
 8004810:	10908100 	.word	0x10908100
 8004814:	2302      	movs	r3, #2
 8004816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	4b78      	ldr	r3, [pc, #480]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	2202      	movs	r2, #2
 8004826:	613a      	str	r2, [r7, #16]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	fa92 f2a2 	rbit	r2, r2
 800482e:	60fa      	str	r2, [r7, #12]
  return result;
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	fab2 f282 	clz	r2, r2
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	f002 021f 	and.w	r2, r2, #31
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f202 	lsl.w	r2, r1, r2
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0b9      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800484e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	496a      	ldr	r1, [pc, #424]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800485c:	4313      	orrs	r3, r2
 800485e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004860:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004868:	4b66      	ldr	r3, [pc, #408]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	4a65      	ldr	r2, [pc, #404]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800486e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004872:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004880:	4b60      	ldr	r3, [pc, #384]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	f023 0203 	bic.w	r2, r3, #3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	495d      	ldr	r1, [pc, #372]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800488e:	4313      	orrs	r3, r2
 8004890:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800489e:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4956      	ldr	r1, [pc, #344]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048bc:	4b51      	ldr	r3, [pc, #324]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	494e      	ldr	r1, [pc, #312]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048da:	4b4a      	ldr	r3, [pc, #296]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f023 0210 	bic.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4947      	ldr	r1, [pc, #284]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048f8:	4b42      	ldr	r3, [pc, #264]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	493f      	ldr	r1, [pc, #252]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004916:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	f023 0220 	bic.w	r2, r3, #32
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4938      	ldr	r1, [pc, #224]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004924:	4313      	orrs	r3, r2
 8004926:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004934:	4b33      	ldr	r3, [pc, #204]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4930      	ldr	r1, [pc, #192]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004942:	4313      	orrs	r3, r2
 8004944:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004952:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	4929      	ldr	r1, [pc, #164]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004960:	4313      	orrs	r3, r2
 8004962:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004970:	4b24      	ldr	r3, [pc, #144]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	4921      	ldr	r1, [pc, #132]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800498e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	491a      	ldr	r1, [pc, #104]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800499c:	4313      	orrs	r3, r2
 800499e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049ac:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	4912      	ldr	r1, [pc, #72]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	490b      	ldr	r1, [pc, #44]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f4:	4903      	ldr	r1, [pc, #12]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3748      	adds	r7, #72	@ 0x48
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000

08004a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e09d      	b.n	8004b56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a2a:	d009      	beq.n	8004a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e005      	b.n	8004a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc f942 	bl	8000ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a80:	d902      	bls.n	8004a88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e002      	b.n	8004a8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_Init+0xa0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aea:	ea42 0103 	orr.w	r1, r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	f003 0204 	and.w	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b24:	ea42 0103 	orr.w	r1, r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e049      	b.n	8004c04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fc f90f 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f000 fcff 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e04a      	b.n	8004cba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x6c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x6c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xc0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x6c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x6c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0x6c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a19      	ldr	r2, [pc, #100]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d115      	bne.n	8004ca4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	4b17      	ldr	r3, [pc, #92]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d015      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0xaa>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d011      	beq.n	8004cb6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	e008      	b.n	8004cb6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	00010007 	.word	0x00010007

08004ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e049      	b.n	8004d86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc f82e 	bl	8000d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 fc3e 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x24>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e03c      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d109      	bne.n	8004dce <HAL_TIM_PWM_Start+0x3e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e02f      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d109      	bne.n	8004de8 <HAL_TIM_PWM_Start+0x58>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e022      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d109      	bne.n	8004e02 <HAL_TIM_PWM_Start+0x72>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	e015      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d109      	bne.n	8004e1c <HAL_TIM_PWM_Start+0x8c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e008      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e097      	b.n	8004f66 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Start+0xb6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e44:	e023      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Start+0xc6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e54:	e01b      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Start+0xd6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e64:	e013      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start+0xe6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e74:	e00b      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0xf6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e84:	e003      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2201      	movs	r2, #1
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 ff8e 	bl	8005db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a33      	ldr	r2, [pc, #204]	@ (8004f70 <HAL_TIM_PWM_Start+0x1e0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a32      	ldr	r2, [pc, #200]	@ (8004f74 <HAL_TIM_PWM_Start+0x1e4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a30      	ldr	r2, [pc, #192]	@ (8004f78 <HAL_TIM_PWM_Start+0x1e8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8004f7c <HAL_TIM_PWM_Start+0x1ec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f80 <HAL_TIM_PWM_Start+0x1f0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x142>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_PWM_Start+0x144>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a20      	ldr	r2, [pc, #128]	@ (8004f70 <HAL_TIM_PWM_Start+0x1e0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d018      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x194>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efa:	d013      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x194>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a20      	ldr	r2, [pc, #128]	@ (8004f84 <HAL_TIM_PWM_Start+0x1f4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x194>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <HAL_TIM_PWM_Start+0x1f8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x194>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <HAL_TIM_PWM_Start+0x1e4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x194>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a16      	ldr	r2, [pc, #88]	@ (8004f78 <HAL_TIM_PWM_Start+0x1e8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d115      	bne.n	8004f50 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	4b18      	ldr	r3, [pc, #96]	@ (8004f8c <HAL_TIM_PWM_Start+0x1fc>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b06      	cmp	r3, #6
 8004f34:	d015      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x1d2>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3c:	d011      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4e:	e008      	b.n	8004f62 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e000      	b.n	8004f64 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	00010007 	.word	0x00010007

08004f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d020      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0202 	mvn.w	r2, #2
 8004fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fac1 	bl	8005562 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fab3 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fac4 	bl	8005576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d020      	beq.n	8005040 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01b      	beq.n	8005040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0204 	mvn.w	r2, #4
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa9b 	bl	8005562 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa8d 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fa9e 	bl	8005576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d020      	beq.n	800508c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0208 	mvn.w	r2, #8
 800505c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2204      	movs	r2, #4
 8005062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa75 	bl	8005562 <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa67 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa78 	bl	8005576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0210 	mvn.w	r2, #16
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2208      	movs	r2, #8
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fa4f 	bl	8005562 <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa41 	bl	800554e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fa52 	bl	8005576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fb f8de 	bl	80002b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00c      	beq.n	8005120 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 ff7a 	bl	8006014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 ff72 	bl	8006028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa11 	bl	800558a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0220 	mvn.w	r2, #32
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 ff3a 	bl	8006000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e0ff      	b.n	80053b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b14      	cmp	r3, #20
 80051be:	f200 80f0 	bhi.w	80053a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051c2:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	080053a3 	.word	0x080053a3
 80051d0:	080053a3 	.word	0x080053a3
 80051d4:	080053a3 	.word	0x080053a3
 80051d8:	0800525d 	.word	0x0800525d
 80051dc:	080053a3 	.word	0x080053a3
 80051e0:	080053a3 	.word	0x080053a3
 80051e4:	080053a3 	.word	0x080053a3
 80051e8:	0800529f 	.word	0x0800529f
 80051ec:	080053a3 	.word	0x080053a3
 80051f0:	080053a3 	.word	0x080053a3
 80051f4:	080053a3 	.word	0x080053a3
 80051f8:	080052df 	.word	0x080052df
 80051fc:	080053a3 	.word	0x080053a3
 8005200:	080053a3 	.word	0x080053a3
 8005204:	080053a3 	.word	0x080053a3
 8005208:	08005321 	.word	0x08005321
 800520c:	080053a3 	.word	0x080053a3
 8005210:	080053a3 	.word	0x080053a3
 8005214:	080053a3 	.word	0x080053a3
 8005218:	08005361 	.word	0x08005361
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fa58 	bl	80056d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0208 	orr.w	r2, r2, #8
 8005236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6999      	ldr	r1, [r3, #24]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	619a      	str	r2, [r3, #24]
      break;
 800525a:	e0a5      	b.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fac8 	bl	80057f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6999      	ldr	r1, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	021a      	lsls	r2, r3, #8
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]
      break;
 800529c:	e084      	b.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fb31 	bl	800590c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0208 	orr.w	r2, r2, #8
 80052b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0204 	bic.w	r2, r2, #4
 80052c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69d9      	ldr	r1, [r3, #28]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	61da      	str	r2, [r3, #28]
      break;
 80052dc:	e064      	b.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fb99 	bl	8005a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69d9      	ldr	r1, [r3, #28]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	021a      	lsls	r2, r3, #8
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	61da      	str	r2, [r3, #28]
      break;
 800531e:	e043      	b.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fbe2 	bl	8005af0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0208 	orr.w	r2, r2, #8
 800533a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800535e:	e023      	b.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fc26 	bl	8005bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053a0:	e002      	b.n	80053a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
      break;
 80053a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop

080053bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0x1c>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0b6      	b.n	8005546 <HAL_TIM_ConfigClockSource+0x18a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005414:	d03e      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0xd8>
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800541a:	f200 8087 	bhi.w	800552c <HAL_TIM_ConfigClockSource+0x170>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005422:	f000 8086 	beq.w	8005532 <HAL_TIM_ConfigClockSource+0x176>
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800542a:	d87f      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 800542c:	2b70      	cmp	r3, #112	@ 0x70
 800542e:	d01a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0xaa>
 8005430:	2b70      	cmp	r3, #112	@ 0x70
 8005432:	d87b      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 8005434:	2b60      	cmp	r3, #96	@ 0x60
 8005436:	d050      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x11e>
 8005438:	2b60      	cmp	r3, #96	@ 0x60
 800543a:	d877      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 800543c:	2b50      	cmp	r3, #80	@ 0x50
 800543e:	d03c      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0xfe>
 8005440:	2b50      	cmp	r3, #80	@ 0x50
 8005442:	d873      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d058      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x13e>
 8005448:	2b40      	cmp	r3, #64	@ 0x40
 800544a:	d86f      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 800544c:	2b30      	cmp	r3, #48	@ 0x30
 800544e:	d064      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15e>
 8005450:	2b30      	cmp	r3, #48	@ 0x30
 8005452:	d86b      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d060      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15e>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d867      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x170>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d05c      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15e>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d05a      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x15e>
 8005464:	e062      	b.n	800552c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005476:	f000 fc7f 	bl	8005d78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	609a      	str	r2, [r3, #8]
      break;
 8005492:	e04f      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a4:	f000 fc68 	bl	8005d78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054b6:	609a      	str	r2, [r3, #8]
      break;
 80054b8:	e03c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 fbdc 	bl	8005c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2150      	movs	r1, #80	@ 0x50
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fc35 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e02c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 fbfb 	bl	8005ce2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2160      	movs	r1, #96	@ 0x60
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fc25 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 80054f8:	e01c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005506:	461a      	mov	r2, r3
 8005508:	f000 fbbc 	bl	8005c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2140      	movs	r1, #64	@ 0x40
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fc15 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 8005518:	e00c      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 fc0c 	bl	8005d42 <TIM_ITRx_SetConfig>
      break;
 800552a:	e003      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e000      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a42      	ldr	r2, [pc, #264]	@ (80056bc <TIM_Base_SetConfig+0x11c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00f      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055be:	d00b      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3f      	ldr	r2, [pc, #252]	@ (80056c0 <TIM_Base_SetConfig+0x120>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3e      	ldr	r2, [pc, #248]	@ (80056c4 <TIM_Base_SetConfig+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3d      	ldr	r2, [pc, #244]	@ (80056c8 <TIM_Base_SetConfig+0x128>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a33      	ldr	r2, [pc, #204]	@ (80056bc <TIM_Base_SetConfig+0x11c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01b      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d017      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a30      	ldr	r2, [pc, #192]	@ (80056c0 <TIM_Base_SetConfig+0x120>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2f      	ldr	r2, [pc, #188]	@ (80056c4 <TIM_Base_SetConfig+0x124>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00f      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2e      	ldr	r2, [pc, #184]	@ (80056c8 <TIM_Base_SetConfig+0x128>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2d      	ldr	r2, [pc, #180]	@ (80056cc <TIM_Base_SetConfig+0x12c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2c      	ldr	r2, [pc, #176]	@ (80056d0 <TIM_Base_SetConfig+0x130>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2b      	ldr	r2, [pc, #172]	@ (80056d4 <TIM_Base_SetConfig+0x134>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d108      	bne.n	800563c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <TIM_Base_SetConfig+0x11c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00f      	beq.n	8005688 <TIM_Base_SetConfig+0xe8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a17      	ldr	r2, [pc, #92]	@ (80056c8 <TIM_Base_SetConfig+0x128>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0xe8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <TIM_Base_SetConfig+0x12c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0xe8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a15      	ldr	r2, [pc, #84]	@ (80056d0 <TIM_Base_SetConfig+0x130>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0xe8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a14      	ldr	r2, [pc, #80]	@ (80056d4 <TIM_Base_SetConfig+0x134>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d103      	bne.n	8005690 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d105      	bne.n	80056ae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f023 0201 	bic.w	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]
  }
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40013400 	.word	0x40013400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800

080056d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f023 0201 	bic.w	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0302 	bic.w	r3, r3, #2
 8005724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a2c      	ldr	r2, [pc, #176]	@ (80057e4 <TIM_OC1_SetConfig+0x10c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00f      	beq.n	8005758 <TIM_OC1_SetConfig+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a2b      	ldr	r2, [pc, #172]	@ (80057e8 <TIM_OC1_SetConfig+0x110>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00b      	beq.n	8005758 <TIM_OC1_SetConfig+0x80>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a2a      	ldr	r2, [pc, #168]	@ (80057ec <TIM_OC1_SetConfig+0x114>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <TIM_OC1_SetConfig+0x80>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a29      	ldr	r2, [pc, #164]	@ (80057f0 <TIM_OC1_SetConfig+0x118>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_OC1_SetConfig+0x80>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a28      	ldr	r2, [pc, #160]	@ (80057f4 <TIM_OC1_SetConfig+0x11c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d10c      	bne.n	8005772 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0308 	bic.w	r3, r3, #8
 800575e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1b      	ldr	r2, [pc, #108]	@ (80057e4 <TIM_OC1_SetConfig+0x10c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_OC1_SetConfig+0xc2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1a      	ldr	r2, [pc, #104]	@ (80057e8 <TIM_OC1_SetConfig+0x110>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_OC1_SetConfig+0xc2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a19      	ldr	r2, [pc, #100]	@ (80057ec <TIM_OC1_SetConfig+0x114>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_OC1_SetConfig+0xc2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <TIM_OC1_SetConfig+0x118>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_OC1_SetConfig+0xc2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <TIM_OC1_SetConfig+0x11c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d111      	bne.n	80057be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f023 0210 	bic.w	r2, r3, #16
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0320 	bic.w	r3, r3, #32
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a28      	ldr	r2, [pc, #160]	@ (80058f8 <TIM_OC2_SetConfig+0x100>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC2_SetConfig+0x6c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a27      	ldr	r2, [pc, #156]	@ (80058fc <TIM_OC2_SetConfig+0x104>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10d      	bne.n	8005880 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800587e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <TIM_OC2_SetConfig+0x100>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00f      	beq.n	80058a8 <TIM_OC2_SetConfig+0xb0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <TIM_OC2_SetConfig+0x104>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_OC2_SetConfig+0xb0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1b      	ldr	r2, [pc, #108]	@ (8005900 <TIM_OC2_SetConfig+0x108>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_OC2_SetConfig+0xb0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <TIM_OC2_SetConfig+0x10c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_OC2_SetConfig+0xb0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <TIM_OC2_SetConfig+0x110>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d113      	bne.n	80058d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a27      	ldr	r2, [pc, #156]	@ (8005a08 <TIM_OC3_SetConfig+0xfc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_OC3_SetConfig+0x6a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a26      	ldr	r2, [pc, #152]	@ (8005a0c <TIM_OC3_SetConfig+0x100>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10d      	bne.n	8005992 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005990:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1c      	ldr	r2, [pc, #112]	@ (8005a08 <TIM_OC3_SetConfig+0xfc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00f      	beq.n	80059ba <TIM_OC3_SetConfig+0xae>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a0c <TIM_OC3_SetConfig+0x100>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_OC3_SetConfig+0xae>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <TIM_OC3_SetConfig+0x104>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_OC3_SetConfig+0xae>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a19      	ldr	r2, [pc, #100]	@ (8005a14 <TIM_OC3_SetConfig+0x108>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_OC3_SetConfig+0xae>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <TIM_OC3_SetConfig+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d113      	bne.n	80059e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	621a      	str	r2, [r3, #32]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800

08005a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	031b      	lsls	r3, r3, #12
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a18      	ldr	r2, [pc, #96]	@ (8005adc <TIM_OC4_SetConfig+0xc0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x84>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a17      	ldr	r2, [pc, #92]	@ (8005ae0 <TIM_OC4_SetConfig+0xc4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x84>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a16      	ldr	r2, [pc, #88]	@ (8005ae4 <TIM_OC4_SetConfig+0xc8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x84>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a15      	ldr	r2, [pc, #84]	@ (8005ae8 <TIM_OC4_SetConfig+0xcc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x84>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	@ (8005aec <TIM_OC4_SetConfig+0xd0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40013400 	.word	0x40013400
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a17      	ldr	r2, [pc, #92]	@ (8005ba4 <TIM_OC5_SetConfig+0xb4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_OC5_SetConfig+0x7a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a16      	ldr	r2, [pc, #88]	@ (8005ba8 <TIM_OC5_SetConfig+0xb8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_OC5_SetConfig+0x7a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a15      	ldr	r2, [pc, #84]	@ (8005bac <TIM_OC5_SetConfig+0xbc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_OC5_SetConfig+0x7a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a14      	ldr	r2, [pc, #80]	@ (8005bb0 <TIM_OC5_SetConfig+0xc0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC5_SetConfig+0x7a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a13      	ldr	r2, [pc, #76]	@ (8005bb4 <TIM_OC5_SetConfig+0xc4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d109      	bne.n	8005b7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	621a      	str	r2, [r3, #32]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800

08005bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	051b      	lsls	r3, r3, #20
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a18      	ldr	r2, [pc, #96]	@ (8005c70 <TIM_OC6_SetConfig+0xb8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00f      	beq.n	8005c34 <TIM_OC6_SetConfig+0x7c>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a17      	ldr	r2, [pc, #92]	@ (8005c74 <TIM_OC6_SetConfig+0xbc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_OC6_SetConfig+0x7c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a16      	ldr	r2, [pc, #88]	@ (8005c78 <TIM_OC6_SetConfig+0xc0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_OC6_SetConfig+0x7c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a15      	ldr	r2, [pc, #84]	@ (8005c7c <TIM_OC6_SetConfig+0xc4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC6_SetConfig+0x7c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a14      	ldr	r2, [pc, #80]	@ (8005c80 <TIM_OC6_SetConfig+0xc8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d109      	bne.n	8005c48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800

08005c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f023 0201 	bic.w	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 030a 	bic.w	r3, r3, #10
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b087      	sub	sp, #28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f023 0210 	bic.w	r2, r3, #16
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f043 0307 	orr.w	r3, r3, #7
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	609a      	str	r2, [r3, #8]
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2201      	movs	r2, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	fa01 f303 	lsl.w	r3, r1, r3
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e063      	b.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d108      	bne.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8e:	d013      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a18      	ldr	r2, [pc, #96]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a17      	ldr	r2, [pc, #92]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a12      	ldr	r2, [pc, #72]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a13      	ldr	r2, [pc, #76]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40014000 	.word	0x40014000

08005f04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e065      	b.n	8005fec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a14      	ldr	r2, [pc, #80]	@ (8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d115      	bne.n	8005fda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	051b      	lsls	r3, r3, #20
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40013400 	.word	0x40013400

08006000 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e040      	b.n	80060d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fa ff00 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	@ 0x24
 8006068:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fdd0 	bl	8006c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fbf9 	bl	8006880 <UART_SetConfig>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e01b      	b.n	80060d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fe4f 	bl	8006d6c <UART_CheckIdleState>
 80060ce:	4603      	mov	r3, r0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d177      	bne.n	80061e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_UART_Transmit+0x24>
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e070      	b.n	80061e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2221      	movs	r2, #33	@ 0x21
 800610c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800610e:	f7fb f855 	bl	80011bc <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	88fa      	ldrh	r2, [r7, #6]
 8006118:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612c:	d108      	bne.n	8006140 <HAL_UART_Transmit+0x68>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d104      	bne.n	8006140 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e003      	b.n	8006148 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006148:	e02f      	b.n	80061aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	2180      	movs	r1, #128	@ 0x80
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 feb1 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e03b      	b.n	80061e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	881a      	ldrh	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800617c:	b292      	uxth	r2, r2
 800617e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	3302      	adds	r3, #2
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e007      	b.n	8006198 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1c9      	bne.n	800614a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2200      	movs	r2, #0
 80061be:	2140      	movs	r1, #64	@ 0x40
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fe7b 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e005      	b.n	80061e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	e000      	b.n	80061e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	@ 0x28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4613      	mov	r3, r2
 80061f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d132      	bne.n	8006268 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_Receive_IT+0x24>
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e02b      	b.n	800626a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d018      	beq.n	8006258 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	613b      	str	r3, [r7, #16]
   return(result);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	69f9      	ldr	r1, [r7, #28]
 800624a:	6a3a      	ldr	r2, [r7, #32]
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	61bb      	str	r3, [r7, #24]
   return(result);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e6      	bne.n	8006226 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	461a      	mov	r2, r3
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fe9a 	bl	8006f98 <UART_Start_Receive_IT>
 8006264:	4603      	mov	r3, r0
 8006266:	e000      	b.n	800626a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006268:	2302      	movs	r3, #2
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	3728      	adds	r7, #40	@ 0x28
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b0ba      	sub	sp, #232	@ 0xe8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800629a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800629e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062a2:	4013      	ands	r3, r2
 80062a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d115      	bne.n	80062dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00f      	beq.n	80062dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 82ab 	beq.w	8006828 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
      }
      return;
 80062da:	e2a5      	b.n	8006828 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8117 	beq.w	8006514 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062f6:	4b85      	ldr	r3, [pc, #532]	@ (800650c <HAL_UART_IRQHandler+0x298>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 810a 	beq.w	8006514 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d011      	beq.n	8006330 <HAL_UART_IRQHandler+0xbc>
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2201      	movs	r2, #1
 800631e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d011      	beq.n	8006360 <HAL_UART_IRQHandler+0xec>
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2202      	movs	r2, #2
 800634e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006356:	f043 0204 	orr.w	r2, r3, #4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d011      	beq.n	8006390 <HAL_UART_IRQHandler+0x11c>
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2204      	movs	r2, #4
 800637e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006386:	f043 0202 	orr.w	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d017      	beq.n	80063cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2208      	movs	r2, #8
 80063ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <HAL_UART_IRQHandler+0x18a>
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8211 	beq.w	800682c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006438:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006446:	2b40      	cmp	r3, #64	@ 0x40
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800644e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	d04f      	beq.n	80064f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fe52 	bl	8007100 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	d141      	bne.n	80064ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006488:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006496:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800649a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d013      	beq.n	80064e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c2:	4a13      	ldr	r2, [pc, #76]	@ (8006510 <HAL_UART_IRQHandler+0x29c>)
 80064c4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc faeb 	bl	8002aa6 <HAL_DMA_Abort_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d017      	beq.n	8006506 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e00f      	b.n	8006506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9b4 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00b      	b.n	8006506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9b0 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e007      	b.n	8006506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9ac 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006504:	e192      	b.n	800682c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006506:	bf00      	nop
    return;
 8006508:	e190      	b.n	800682c <HAL_UART_IRQHandler+0x5b8>
 800650a:	bf00      	nop
 800650c:	04000120 	.word	0x04000120
 8006510:	080071c9 	.word	0x080071c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006518:	2b01      	cmp	r3, #1
 800651a:	f040 814b 	bne.w	80067b4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8144 	beq.w	80067b4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 813d 	beq.w	80067b4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2210      	movs	r2, #16
 8006540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	f040 80b5 	bne.w	80066bc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800655e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8164 	beq.w	8006830 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800656e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006572:	429a      	cmp	r2, r3
 8006574:	f080 815c 	bcs.w	8006830 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800657e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b20      	cmp	r3, #32
 800658a:	f000 8086 	beq.w	800669a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065bc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1da      	bne.n	800658e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006600:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006604:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800660e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e1      	bne.n	80065d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800662a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006638:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800663a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800663e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e3      	bne.n	8006614 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800667c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800667e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006682:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800668a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e4      	bne.n	800665a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006694:	4618      	mov	r0, r3
 8006696:	f7fc f9c8 	bl	8002a2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f8d7 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ba:	e0b9      	b.n	8006830 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80ab 	beq.w	8006834 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80066de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80a6 	beq.w	8006834 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800670a:	647b      	str	r3, [r7, #68]	@ 0x44
 800670c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006710:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e4      	bne.n	80066e8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	623b      	str	r3, [r7, #32]
   return(result);
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006742:	633a      	str	r2, [r7, #48]	@ 0x30
 8006744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e3      	bne.n	800671e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	60fb      	str	r3, [r7, #12]
   return(result);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	617b      	str	r3, [r7, #20]
   return(result);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e4      	bne.n	800676a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f85b 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b2:	e03f      	b.n	8006834 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_UART_IRQHandler+0x56a>
 80067c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80067d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fede 	bl	8007598 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067dc:	e02d      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01c      	beq.n	8006838 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
    }
    return;
 8006806:	e017      	b.n	8006838 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d012      	beq.n	800683a <HAL_UART_IRQHandler+0x5c6>
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00c      	beq.n	800683a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fce7 	bl	80071f4 <UART_EndTransmit_IT>
    return;
 8006826:	e008      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006828:	bf00      	nop
 800682a:	e006      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
    return;
 800682c:	bf00      	nop
 800682e:	e004      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
    return;
 8006838:	bf00      	nop
  }

}
 800683a:	37e8      	adds	r7, #232	@ 0xe8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80068ae:	f023 030c 	bic.w	r3, r3, #12
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4aa7      	ldr	r2, [pc, #668]	@ (8006b98 <UART_SetConfig+0x318>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d120      	bne.n	8006942 <UART_SetConfig+0xc2>
 8006900:	4ba6      	ldr	r3, [pc, #664]	@ (8006b9c <UART_SetConfig+0x31c>)
 8006902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d817      	bhi.n	800693c <UART_SetConfig+0xbc>
 800690c:	a201      	add	r2, pc, #4	@ (adr r2, 8006914 <UART_SetConfig+0x94>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006925 	.word	0x08006925
 8006918:	08006931 	.word	0x08006931
 800691c:	08006937 	.word	0x08006937
 8006920:	0800692b 	.word	0x0800692b
 8006924:	2301      	movs	r3, #1
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e0b5      	b.n	8006a96 <UART_SetConfig+0x216>
 800692a:	2302      	movs	r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e0b2      	b.n	8006a96 <UART_SetConfig+0x216>
 8006930:	2304      	movs	r3, #4
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e0af      	b.n	8006a96 <UART_SetConfig+0x216>
 8006936:	2308      	movs	r3, #8
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e0ac      	b.n	8006a96 <UART_SetConfig+0x216>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e0a9      	b.n	8006a96 <UART_SetConfig+0x216>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a96      	ldr	r2, [pc, #600]	@ (8006ba0 <UART_SetConfig+0x320>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d124      	bne.n	8006996 <UART_SetConfig+0x116>
 800694c:	4b93      	ldr	r3, [pc, #588]	@ (8006b9c <UART_SetConfig+0x31c>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006954:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006958:	d011      	beq.n	800697e <UART_SetConfig+0xfe>
 800695a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800695e:	d817      	bhi.n	8006990 <UART_SetConfig+0x110>
 8006960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006964:	d011      	beq.n	800698a <UART_SetConfig+0x10a>
 8006966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800696a:	d811      	bhi.n	8006990 <UART_SetConfig+0x110>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <UART_SetConfig+0xf8>
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006974:	d006      	beq.n	8006984 <UART_SetConfig+0x104>
 8006976:	e00b      	b.n	8006990 <UART_SetConfig+0x110>
 8006978:	2300      	movs	r3, #0
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e08b      	b.n	8006a96 <UART_SetConfig+0x216>
 800697e:	2302      	movs	r3, #2
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e088      	b.n	8006a96 <UART_SetConfig+0x216>
 8006984:	2304      	movs	r3, #4
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e085      	b.n	8006a96 <UART_SetConfig+0x216>
 800698a:	2308      	movs	r3, #8
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e082      	b.n	8006a96 <UART_SetConfig+0x216>
 8006990:	2310      	movs	r3, #16
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e07f      	b.n	8006a96 <UART_SetConfig+0x216>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a82      	ldr	r2, [pc, #520]	@ (8006ba4 <UART_SetConfig+0x324>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d124      	bne.n	80069ea <UART_SetConfig+0x16a>
 80069a0:	4b7e      	ldr	r3, [pc, #504]	@ (8006b9c <UART_SetConfig+0x31c>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80069a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80069ac:	d011      	beq.n	80069d2 <UART_SetConfig+0x152>
 80069ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80069b2:	d817      	bhi.n	80069e4 <UART_SetConfig+0x164>
 80069b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069b8:	d011      	beq.n	80069de <UART_SetConfig+0x15e>
 80069ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069be:	d811      	bhi.n	80069e4 <UART_SetConfig+0x164>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <UART_SetConfig+0x14c>
 80069c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069c8:	d006      	beq.n	80069d8 <UART_SetConfig+0x158>
 80069ca:	e00b      	b.n	80069e4 <UART_SetConfig+0x164>
 80069cc:	2300      	movs	r3, #0
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e061      	b.n	8006a96 <UART_SetConfig+0x216>
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e05e      	b.n	8006a96 <UART_SetConfig+0x216>
 80069d8:	2304      	movs	r3, #4
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e05b      	b.n	8006a96 <UART_SetConfig+0x216>
 80069de:	2308      	movs	r3, #8
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e058      	b.n	8006a96 <UART_SetConfig+0x216>
 80069e4:	2310      	movs	r3, #16
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e055      	b.n	8006a96 <UART_SetConfig+0x216>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a6e      	ldr	r2, [pc, #440]	@ (8006ba8 <UART_SetConfig+0x328>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d124      	bne.n	8006a3e <UART_SetConfig+0x1be>
 80069f4:	4b69      	ldr	r3, [pc, #420]	@ (8006b9c <UART_SetConfig+0x31c>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80069fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a00:	d011      	beq.n	8006a26 <UART_SetConfig+0x1a6>
 8006a02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a06:	d817      	bhi.n	8006a38 <UART_SetConfig+0x1b8>
 8006a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a0c:	d011      	beq.n	8006a32 <UART_SetConfig+0x1b2>
 8006a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a12:	d811      	bhi.n	8006a38 <UART_SetConfig+0x1b8>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <UART_SetConfig+0x1a0>
 8006a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a1c:	d006      	beq.n	8006a2c <UART_SetConfig+0x1ac>
 8006a1e:	e00b      	b.n	8006a38 <UART_SetConfig+0x1b8>
 8006a20:	2300      	movs	r3, #0
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e037      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a26:	2302      	movs	r3, #2
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e034      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e031      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a32:	2308      	movs	r3, #8
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e02e      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e02b      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a5a      	ldr	r2, [pc, #360]	@ (8006bac <UART_SetConfig+0x32c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d124      	bne.n	8006a92 <UART_SetConfig+0x212>
 8006a48:	4b54      	ldr	r3, [pc, #336]	@ (8006b9c <UART_SetConfig+0x31c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006a50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006a54:	d011      	beq.n	8006a7a <UART_SetConfig+0x1fa>
 8006a56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006a5a:	d817      	bhi.n	8006a8c <UART_SetConfig+0x20c>
 8006a5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a60:	d011      	beq.n	8006a86 <UART_SetConfig+0x206>
 8006a62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a66:	d811      	bhi.n	8006a8c <UART_SetConfig+0x20c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <UART_SetConfig+0x1f4>
 8006a6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a70:	d006      	beq.n	8006a80 <UART_SetConfig+0x200>
 8006a72:	e00b      	b.n	8006a8c <UART_SetConfig+0x20c>
 8006a74:	2300      	movs	r3, #0
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e00a      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a80:	2304      	movs	r3, #4
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e007      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a86:	2308      	movs	r3, #8
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e004      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e001      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a92:	2310      	movs	r3, #16
 8006a94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9e:	d15b      	bne.n	8006b58 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d827      	bhi.n	8006af6 <UART_SetConfig+0x276>
 8006aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <UART_SetConfig+0x22c>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	08006af7 	.word	0x08006af7
 8006abc:	08006ae7 	.word	0x08006ae7
 8006ac0:	08006af7 	.word	0x08006af7
 8006ac4:	08006af7 	.word	0x08006af7
 8006ac8:	08006af7 	.word	0x08006af7
 8006acc:	08006aef 	.word	0x08006aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fd fda8 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006ad4:	61b8      	str	r0, [r7, #24]
        break;
 8006ad6:	e013      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad8:	f7fd fdc6 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8006adc:	61b8      	str	r0, [r7, #24]
        break;
 8006ade:	e00f      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae0:	4b33      	ldr	r3, [pc, #204]	@ (8006bb0 <UART_SetConfig+0x330>)
 8006ae2:	61bb      	str	r3, [r7, #24]
        break;
 8006ae4:	e00c      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae6:	f7fd fd3d 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8006aea:	61b8      	str	r0, [r7, #24]
        break;
 8006aec:	e008      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af2:	61bb      	str	r3, [r7, #24]
        break;
 8006af4:	e004      	b.n	8006b00 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	77bb      	strb	r3, [r7, #30]
        break;
 8006afe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8082 	beq.w	8006c0c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	005a      	lsls	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	441a      	add	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0f      	cmp	r3, #15
 8006b22:	d916      	bls.n	8006b52 <UART_SetConfig+0x2d2>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b2a:	d212      	bcs.n	8006b52 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f023 030f 	bic.w	r3, r3, #15
 8006b34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	89fa      	ldrh	r2, [r7, #14]
 8006b4e:	60da      	str	r2, [r3, #12]
 8006b50:	e05c      	b.n	8006c0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	77bb      	strb	r3, [r7, #30]
 8006b56:	e059      	b.n	8006c0c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b58:	7ffb      	ldrb	r3, [r7, #31]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d835      	bhi.n	8006bca <UART_SetConfig+0x34a>
 8006b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b64 <UART_SetConfig+0x2e4>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b89 	.word	0x08006b89
 8006b68:	08006b91 	.word	0x08006b91
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bcb 	.word	0x08006bcb
 8006b74:	08006bbb 	.word	0x08006bbb
 8006b78:	08006bcb 	.word	0x08006bcb
 8006b7c:	08006bcb 	.word	0x08006bcb
 8006b80:	08006bcb 	.word	0x08006bcb
 8006b84:	08006bc3 	.word	0x08006bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b88:	f7fd fd4c 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006b8c:	61b8      	str	r0, [r7, #24]
        break;
 8006b8e:	e021      	b.n	8006bd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b90:	f7fd fd6a 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8006b94:	61b8      	str	r0, [r7, #24]
        break;
 8006b96:	e01d      	b.n	8006bd4 <UART_SetConfig+0x354>
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40004c00 	.word	0x40004c00
 8006bac:	40005000 	.word	0x40005000
 8006bb0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c24 <UART_SetConfig+0x3a4>)
 8006bb6:	61bb      	str	r3, [r7, #24]
        break;
 8006bb8:	e00c      	b.n	8006bd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bba:	f7fd fcd3 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8006bbe:	61b8      	str	r0, [r7, #24]
        break;
 8006bc0:	e008      	b.n	8006bd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc6:	61bb      	str	r3, [r7, #24]
        break;
 8006bc8:	e004      	b.n	8006bd4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d018      	beq.n	8006c0c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	085a      	lsrs	r2, r3, #1
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	441a      	add	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d909      	bls.n	8006c08 <UART_SetConfig+0x388>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfa:	d205      	bcs.n	8006c08 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	e001      	b.n	8006c0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c18:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	007a1200 	.word	0x007a1200

08006c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01a      	beq.n	8006d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d26:	d10a      	bne.n	8006d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b098      	sub	sp, #96	@ 0x60
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d7c:	f7fa fa1e 	bl	80011bc <HAL_GetTick>
 8006d80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d12e      	bne.n	8006dee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f88c 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d021      	beq.n	8006dee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e6      	bne.n	8006daa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e062      	b.n	8006eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d149      	bne.n	8006e90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f856 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d03c      	beq.n	8006e90 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	623b      	str	r3, [r7, #32]
   return(result);
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e68:	61fa      	str	r2, [r7, #28]
 8006e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	69b9      	ldr	r1, [r7, #24]
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	617b      	str	r3, [r7, #20]
   return(result);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e011      	b.n	8006eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3758      	adds	r7, #88	@ 0x58
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ecc:	e04f      	b.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d04b      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed6:	f7fa f971 	bl	80011bc <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d302      	bcc.n	8006eec <UART_WaitOnFlagUntilTimeout+0x30>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e04e      	b.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d037      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b80      	cmp	r3, #128	@ 0x80
 8006f02:	d034      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b40      	cmp	r3, #64	@ 0x40
 8006f08:	d031      	beq.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d110      	bne.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f8ed 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e029      	b.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f48:	d111      	bne.n	8006f6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f8d3 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e00f      	b.n	8006f8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4013      	ands	r3, r2
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	bf0c      	ite	eq
 8006f7e:	2301      	moveq	r3, #1
 8006f80:	2300      	movne	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d0a0      	beq.n	8006ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b097      	sub	sp, #92	@ 0x5c
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fca:	d10e      	bne.n	8006fea <UART_Start_Receive_IT+0x52>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d105      	bne.n	8006fe0 <UART_Start_Receive_IT+0x48>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006fda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fde:	e01a      	b.n	8007016 <UART_Start_Receive_IT+0x7e>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	22ff      	movs	r2, #255	@ 0xff
 8006fe4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fe8:	e015      	b.n	8007016 <UART_Start_Receive_IT+0x7e>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10d      	bne.n	800700e <UART_Start_Receive_IT+0x76>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d104      	bne.n	8007004 <UART_Start_Receive_IT+0x6c>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	22ff      	movs	r2, #255	@ 0xff
 8006ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007002:	e008      	b.n	8007016 <UART_Start_Receive_IT+0x7e>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	227f      	movs	r2, #127	@ 0x7f
 8007008:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800700c:	e003      	b.n	8007016 <UART_Start_Receive_IT+0x7e>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2222      	movs	r2, #34	@ 0x22
 8007022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	657b      	str	r3, [r7, #84]	@ 0x54
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3308      	adds	r3, #8
 8007044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007046:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007048:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800704c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e5      	bne.n	8007026 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007062:	d107      	bne.n	8007074 <UART_Start_Receive_IT+0xdc>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a22      	ldr	r2, [pc, #136]	@ (80070f8 <UART_Start_Receive_IT+0x160>)
 8007070:	669a      	str	r2, [r3, #104]	@ 0x68
 8007072:	e002      	b.n	800707a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4a21      	ldr	r2, [pc, #132]	@ (80070fc <UART_Start_Receive_IT+0x164>)
 8007078:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d019      	beq.n	80070b6 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e6      	bne.n	8007082 <UART_Start_Receive_IT+0xea>
 80070b4:	e018      	b.n	80070e8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	613b      	str	r3, [r7, #16]
   return(result);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f043 0320 	orr.w	r3, r3, #32
 80070ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	69f9      	ldr	r1, [r7, #28]
 80070da:	6a3a      	ldr	r2, [r7, #32]
 80070dc:	e841 2300 	strex	r3, r2, [r1]
 80070e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e6      	bne.n	80070b6 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	375c      	adds	r7, #92	@ 0x5c
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	080073f1 	.word	0x080073f1
 80070fc:	08007249 	.word	0x08007249

08007100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b095      	sub	sp, #84	@ 0x54
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007126:	643b      	str	r3, [r7, #64]	@ 0x40
 8007128:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800712c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e6      	bne.n	8007108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	61fb      	str	r3, [r7, #28]
   return(result);
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800715c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e5      	bne.n	800713a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	2b01      	cmp	r3, #1
 8007174:	d118      	bne.n	80071a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60bb      	str	r3, [r7, #8]
   return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	647b      	str	r3, [r7, #68]	@ 0x44
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6979      	ldr	r1, [r7, #20]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	613b      	str	r3, [r7, #16]
   return(result);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071bc:	bf00      	nop
 80071be:	3754      	adds	r7, #84	@ 0x54
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fb34 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	60bb      	str	r3, [r7, #8]
   return(result);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6979      	ldr	r1, [r7, #20]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	613b      	str	r3, [r7, #16]
   return(result);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e6      	bne.n	80071fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fb00 	bl	8006840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007240:	bf00      	nop
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b09c      	sub	sp, #112	@ 0x70
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007256:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007260:	2b22      	cmp	r3, #34	@ 0x22
 8007262:	f040 80b9 	bne.w	80073d8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800726c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007270:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800727a:	b2da      	uxtb	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007280:	400a      	ands	r2, r1
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 809c 	bne.w	80073e8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007302:	647a      	str	r2, [r7, #68]	@ 0x44
 8007304:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d018      	beq.n	800736a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	623b      	str	r3, [r7, #32]
   return(result);
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800734c:	663b      	str	r3, [r7, #96]	@ 0x60
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30
 8007358:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800735c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736e:	2b01      	cmp	r3, #1
 8007370:	d12e      	bne.n	80073d0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	60fb      	str	r3, [r7, #12]
   return(result);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f023 0310 	bic.w	r3, r3, #16
 800738c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	69b9      	ldr	r1, [r7, #24]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	617b      	str	r3, [r7, #20]
   return(result);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d103      	bne.n	80073c0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2210      	movs	r2, #16
 80073be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fa4d 	bl	8006868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ce:	e00b      	b.n	80073e8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7f8 ff35 	bl	8000240 <HAL_UART_RxCpltCallback>
}
 80073d6:	e007      	b.n	80073e8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0208 	orr.w	r2, r2, #8
 80073e6:	619a      	str	r2, [r3, #24]
}
 80073e8:	bf00      	nop
 80073ea:	3770      	adds	r7, #112	@ 0x70
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b09c      	sub	sp, #112	@ 0x70
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007408:	2b22      	cmp	r3, #34	@ 0x22
 800740a:	f040 80b9 	bne.w	8007580 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800741e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007426:	4013      	ands	r3, r2
 8007428:	b29a      	uxth	r2, r3
 800742a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800742c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	f040 809c 	bne.w	8007590 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800746c:	667b      	str	r3, [r7, #100]	@ 0x64
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007476:	657b      	str	r3, [r7, #84]	@ 0x54
 8007478:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800747c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80074aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e5      	bne.n	800748a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d018      	beq.n	8007512 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007500:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007516:	2b01      	cmp	r3, #1
 8007518:	d12e      	bne.n	8007578 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	60bb      	str	r3, [r7, #8]
   return(result);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f023 0310 	bic.w	r3, r3, #16
 8007534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	613b      	str	r3, [r7, #16]
   return(result);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e6      	bne.n	8007520 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b10      	cmp	r3, #16
 800755e:	d103      	bne.n	8007568 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2210      	movs	r2, #16
 8007566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff f979 	bl	8006868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007576:	e00b      	b.n	8007590 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7f8 fe61 	bl	8000240 <HAL_UART_RxCpltCallback>
}
 800757e:	e007      	b.n	8007590 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0208 	orr.w	r2, r2, #8
 800758e:	619a      	str	r2, [r3, #24]
}
 8007590:	bf00      	nop
 8007592:	3770      	adds	r7, #112	@ 0x70
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075b4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80075b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	4013      	ands	r3, r2
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <memset>:
 800761e:	4402      	add	r2, r0
 8007620:	4603      	mov	r3, r0
 8007622:	4293      	cmp	r3, r2
 8007624:	d100      	bne.n	8007628 <memset+0xa>
 8007626:	4770      	bx	lr
 8007628:	f803 1b01 	strb.w	r1, [r3], #1
 800762c:	e7f9      	b.n	8007622 <memset+0x4>
	...

08007630 <__libc_init_array>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4d0d      	ldr	r5, [pc, #52]	@ (8007668 <__libc_init_array+0x38>)
 8007634:	4c0d      	ldr	r4, [pc, #52]	@ (800766c <__libc_init_array+0x3c>)
 8007636:	1b64      	subs	r4, r4, r5
 8007638:	10a4      	asrs	r4, r4, #2
 800763a:	2600      	movs	r6, #0
 800763c:	42a6      	cmp	r6, r4
 800763e:	d109      	bne.n	8007654 <__libc_init_array+0x24>
 8007640:	4d0b      	ldr	r5, [pc, #44]	@ (8007670 <__libc_init_array+0x40>)
 8007642:	4c0c      	ldr	r4, [pc, #48]	@ (8007674 <__libc_init_array+0x44>)
 8007644:	f000 f818 	bl	8007678 <_init>
 8007648:	1b64      	subs	r4, r4, r5
 800764a:	10a4      	asrs	r4, r4, #2
 800764c:	2600      	movs	r6, #0
 800764e:	42a6      	cmp	r6, r4
 8007650:	d105      	bne.n	800765e <__libc_init_array+0x2e>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	f855 3b04 	ldr.w	r3, [r5], #4
 8007658:	4798      	blx	r3
 800765a:	3601      	adds	r6, #1
 800765c:	e7ee      	b.n	800763c <__libc_init_array+0xc>
 800765e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007662:	4798      	blx	r3
 8007664:	3601      	adds	r6, #1
 8007666:	e7f2      	b.n	800764e <__libc_init_array+0x1e>
 8007668:	080076e0 	.word	0x080076e0
 800766c:	080076e0 	.word	0x080076e0
 8007670:	080076e0 	.word	0x080076e0
 8007674:	080076e4 	.word	0x080076e4

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
